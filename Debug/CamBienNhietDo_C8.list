
CamBienNhietDo_C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003994  08003994  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003994  08003994  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08003a0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003a0c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e66  00000000  00000000  0002e152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  0002ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018334  00000000  00000000  00031c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb0e  00000000  00000000  00049f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ce67  00000000  00000000  00055a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e28f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  000e296c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038c8 	.word	0x080038c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038c8 	.word	0x080038c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Error_Handler>:
 *
 *  Created on: Jun 20, 2023
 *      Author: Admin
 */
#include "delay.h"
void Error_Handler(void) {
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000160:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000162:	e7fe      	b.n	8000162 <Error_Handler+0x6>

08000164 <delay_init>:
	}
	/* USER CODE END Error_Handler_Debug */
}
void delay_init() {
 8000164:	b580      	push	{r7, lr}
 8000166:	b086      	sub	sp, #24
 8000168:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800016a:	f107 0308 	add.w	r3, r7, #8
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	609a      	str	r2, [r3, #8]
 8000176:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000178:	463b      	mov	r3, r7
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000180:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <delay_init+0x9c>)
 8000182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000186:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 8000188:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <delay_init+0x9c>)
 800018a:	2247      	movs	r2, #71	; 0x47
 800018c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800018e:	4b1c      	ldr	r3, [pc, #112]	; (8000200 <delay_init+0x9c>)
 8000190:	2200      	movs	r2, #0
 8000192:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffff - 1;
 8000194:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <delay_init+0x9c>)
 8000196:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800019a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <delay_init+0x9c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <delay_init+0x9c>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80001a8:	4815      	ldr	r0, [pc, #84]	; (8000200 <delay_init+0x9c>)
 80001aa:	f002 fae9 	bl	8002780 <HAL_TIM_Base_Init>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <delay_init+0x54>
		Error_Handler();
 80001b4:	f7ff ffd2 	bl	800015c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001bc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80001be:	f107 0308 	add.w	r3, r7, #8
 80001c2:	4619      	mov	r1, r3
 80001c4:	480e      	ldr	r0, [pc, #56]	; (8000200 <delay_init+0x9c>)
 80001c6:	f002 fb75 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <delay_init+0x70>
		Error_Handler();
 80001d0:	f7ff ffc4 	bl	800015c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80001d4:	2300      	movs	r3, #0
 80001d6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80001dc:	463b      	mov	r3, r7
 80001de:	4619      	mov	r1, r3
 80001e0:	4807      	ldr	r0, [pc, #28]	; (8000200 <delay_init+0x9c>)
 80001e2:	f002 fd17 	bl	8002c14 <HAL_TIMEx_MasterConfigSynchronization>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <delay_init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80001ec:	f7ff ffb6 	bl	800015c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Base_Start(&htim2);
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <delay_init+0x9c>)
 80001f2:	f002 fb15 	bl	8002820 <HAL_TIM_Base_Start>
	/* USER CODE END TIM2_Init 2 */

}
 80001f6:	bf00      	nop
 80001f8:	3718      	adds	r7, #24
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000098 	.word	0x20000098

08000204 <delay>:
void delay(uint16_t time) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <delay+0x2c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < time)
 8000216:	bf00      	nop
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <delay+0x2c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	429a      	cmp	r2, r3
 8000222:	d3f9      	bcc.n	8000218 <delay+0x14>
		;
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000098 	.word	0x20000098

08000234 <dht11_init>:
 *  Created on: Jun 20, 2023
 *      Author: Admin
 */
#include "dht11.h"
#include "delay.h"
void dht11_init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
	delay_init();
 800023a:	f7ff ff93 	bl	8000164 <delay_init>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <dht11_init+0x78>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a16      	ldr	r2, [pc, #88]	; (80002ac <dht11_init+0x78>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b14      	ldr	r3, [pc, #80]	; (80002ac <dht11_init+0x78>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2120      	movs	r1, #32
 8000268:	4811      	ldr	r0, [pc, #68]	; (80002b0 <dht11_init+0x7c>)
 800026a:	f001 f9fe 	bl	800166a <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800026e:	2320      	movs	r3, #32
 8000270:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000272:	2311      	movs	r3, #17
 8000274:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2302      	movs	r3, #2
 800027c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <dht11_init+0x7c>)
 8000286:	f001 f87f 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800028a:	2340      	movs	r3, #64	; 0x40
 800028c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	4619      	mov	r1, r3
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <dht11_init+0x7c>)
 800029e:	f001 f873 	bl	8001388 <HAL_GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40010800 	.word	0x40010800

080002b4 <dht11_read>:

uint8_t dht11_read(uint8_t *data) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	//kich cho DHT11
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2120      	movs	r1, #32
 80002c0:	4896      	ldr	r0, [pc, #600]	; (800051c <dht11_read+0x268>)
 80002c2:	f001 f9d2 	bl	800166a <HAL_GPIO_WritePin>
	delay(20000);
 80002c6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80002ca:	f7ff ff9b 	bl	8000204 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2120      	movs	r1, #32
 80002d2:	4892      	ldr	r0, [pc, #584]	; (800051c <dht11_read+0x268>)
 80002d4:	f001 f9c9 	bl	800166a <HAL_GPIO_WritePin>
	//
	//		Cho chan A5 lên cao
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80002d8:	4b91      	ldr	r3, [pc, #580]	; (8000520 <dht11_read+0x26c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim2) < 10) {
 80002e0:	e006      	b.n	80002f0 <dht11_read+0x3c>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	488d      	ldr	r0, [pc, #564]	; (800051c <dht11_read+0x268>)
 80002e6:	f001 f9a9 	bl	800163c <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d105      	bne.n	80002fc <dht11_read+0x48>
	while (__HAL_TIM_GET_COUNTER(&htim2) < 10) {
 80002f0:	4b8b      	ldr	r3, [pc, #556]	; (8000520 <dht11_read+0x26c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f6:	2b09      	cmp	r3, #9
 80002f8:	d9f3      	bls.n	80002e2 <dht11_read+0x2e>
 80002fa:	e000      	b.n	80002fe <dht11_read+0x4a>
			break;
 80002fc:	bf00      	nop
		}
	}
	u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80002fe:	4b88      	ldr	r3, [pc, #544]	; (8000520 <dht11_read+0x26c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b87      	ldr	r3, [pc, #540]	; (8000524 <dht11_read+0x270>)
 8000308:	801a      	strh	r2, [r3, #0]
	if (u16Tim >= 10) {
 800030a:	4b86      	ldr	r3, [pc, #536]	; (8000524 <dht11_read+0x270>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	2b09      	cmp	r3, #9
 8000310:	d901      	bls.n	8000316 <dht11_read+0x62>
		return 0;
 8000312:	2300      	movs	r3, #0
 8000314:	e2d1      	b.n	80008ba <dht11_read+0x606>
	}

	// cho chan A5 xuong thap -> DHT11 bat dau phản hồi
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000316:	4b82      	ldr	r3, [pc, #520]	; (8000520 <dht11_read+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < 45) {
 800031e:	e006      	b.n	800032e <dht11_read+0x7a>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000320:	2140      	movs	r1, #64	; 0x40
 8000322:	487e      	ldr	r0, [pc, #504]	; (800051c <dht11_read+0x268>)
 8000324:	f001 f98a 	bl	800163c <HAL_GPIO_ReadPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d005      	beq.n	800033a <dht11_read+0x86>
	while (__HAL_TIM_GET_COUNTER(&htim2) < 45) {
 800032e:	4b7c      	ldr	r3, [pc, #496]	; (8000520 <dht11_read+0x26c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	2b2c      	cmp	r3, #44	; 0x2c
 8000336:	d9f3      	bls.n	8000320 <dht11_read+0x6c>
 8000338:	e000      	b.n	800033c <dht11_read+0x88>
			break;
 800033a:	bf00      	nop
		}
	}
	u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <dht11_read+0x26c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b77      	ldr	r3, [pc, #476]	; (8000524 <dht11_read+0x270>)
 8000346:	801a      	strh	r2, [r3, #0]
	if (u16Tim >= 45 || u16Tim <= 5) {
 8000348:	4b76      	ldr	r3, [pc, #472]	; (8000524 <dht11_read+0x270>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	2b2c      	cmp	r3, #44	; 0x2c
 800034e:	d803      	bhi.n	8000358 <dht11_read+0xa4>
 8000350:	4b74      	ldr	r3, [pc, #464]	; (8000524 <dht11_read+0x270>)
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	2b05      	cmp	r3, #5
 8000356:	d801      	bhi.n	800035c <dht11_read+0xa8>
		return 0;
 8000358:	2300      	movs	r3, #0
 800035a:	e2ae      	b.n	80008ba <dht11_read+0x606>
	}
	// cho chan A5 len cao -> DHT11 dang keo xun thap
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800035c:	4b70      	ldr	r3, [pc, #448]	; (8000520 <dht11_read+0x26c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < 90) {
 8000364:	e006      	b.n	8000374 <dht11_read+0xc0>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	486c      	ldr	r0, [pc, #432]	; (800051c <dht11_read+0x268>)
 800036a:	f001 f967 	bl	800163c <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d105      	bne.n	8000380 <dht11_read+0xcc>
	while (__HAL_TIM_GET_COUNTER(&htim2) < 90) {
 8000374:	4b6a      	ldr	r3, [pc, #424]	; (8000520 <dht11_read+0x26c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037a:	2b59      	cmp	r3, #89	; 0x59
 800037c:	d9f3      	bls.n	8000366 <dht11_read+0xb2>
 800037e:	e000      	b.n	8000382 <dht11_read+0xce>
			break;
 8000380:	bf00      	nop
		}
	}
	u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 8000382:	4b67      	ldr	r3, [pc, #412]	; (8000520 <dht11_read+0x26c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000388:	b29a      	uxth	r2, r3
 800038a:	4b66      	ldr	r3, [pc, #408]	; (8000524 <dht11_read+0x270>)
 800038c:	801a      	strh	r2, [r3, #0]
	if (u16Tim >= 90 || u16Tim <= 70) {
 800038e:	4b65      	ldr	r3, [pc, #404]	; (8000524 <dht11_read+0x270>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	2b59      	cmp	r3, #89	; 0x59
 8000394:	d803      	bhi.n	800039e <dht11_read+0xea>
 8000396:	4b63      	ldr	r3, [pc, #396]	; (8000524 <dht11_read+0x270>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	2b46      	cmp	r3, #70	; 0x46
 800039c:	d801      	bhi.n	80003a2 <dht11_read+0xee>
		return 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	e28b      	b.n	80008ba <dht11_read+0x606>
	}
	// cho chan A5 xuong thap -> DHT11 dang keo len cao
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80003a2:	4b5f      	ldr	r3, [pc, #380]	; (8000520 <dht11_read+0x26c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2200      	movs	r2, #0
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < 95) {
 80003aa:	e006      	b.n	80003ba <dht11_read+0x106>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	485b      	ldr	r0, [pc, #364]	; (800051c <dht11_read+0x268>)
 80003b0:	f001 f944 	bl	800163c <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d005      	beq.n	80003c6 <dht11_read+0x112>
	while (__HAL_TIM_GET_COUNTER(&htim2) < 95) {
 80003ba:	4b59      	ldr	r3, [pc, #356]	; (8000520 <dht11_read+0x26c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	2b5e      	cmp	r3, #94	; 0x5e
 80003c2:	d9f3      	bls.n	80003ac <dht11_read+0xf8>
 80003c4:	e000      	b.n	80003c8 <dht11_read+0x114>
			break;
 80003c6:	bf00      	nop
		}
	}
	u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <dht11_read+0x26c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	4b54      	ldr	r3, [pc, #336]	; (8000524 <dht11_read+0x270>)
 80003d2:	801a      	strh	r2, [r3, #0]
	if (u16Tim >= 95 || u16Tim <= 75) {
 80003d4:	4b53      	ldr	r3, [pc, #332]	; (8000524 <dht11_read+0x270>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	2b5e      	cmp	r3, #94	; 0x5e
 80003da:	d803      	bhi.n	80003e4 <dht11_read+0x130>
 80003dc:	4b51      	ldr	r3, [pc, #324]	; (8000524 <dht11_read+0x270>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	2b4b      	cmp	r3, #75	; 0x4b
 80003e2:	d801      	bhi.n	80003e8 <dht11_read+0x134>
		return 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	e268      	b.n	80008ba <dht11_read+0x606>
	}

	//------------Doc Data--------------
	//Nhan byte so 1
	for (i = 0; i < 8; i++) {
 80003e8:	4b4f      	ldr	r3, [pc, #316]	; (8000528 <dht11_read+0x274>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e064      	b.n	80004ba <dht11_read+0x206>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80003f0:	4b4b      	ldr	r3, [pc, #300]	; (8000520 <dht11_read+0x26c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2200      	movs	r2, #0
 80003f6:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80003f8:	e006      	b.n	8000408 <dht11_read+0x154>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80003fa:	2140      	movs	r1, #64	; 0x40
 80003fc:	4847      	ldr	r0, [pc, #284]	; (800051c <dht11_read+0x268>)
 80003fe:	f001 f91d 	bl	800163c <HAL_GPIO_ReadPin>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d105      	bne.n	8000414 <dht11_read+0x160>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 8000408:	4b45      	ldr	r3, [pc, #276]	; (8000520 <dht11_read+0x26c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040e:	2b40      	cmp	r3, #64	; 0x40
 8000410:	d9f3      	bls.n	80003fa <dht11_read+0x146>
 8000412:	e000      	b.n	8000416 <dht11_read+0x162>
				break;
 8000414:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 8000416:	4b42      	ldr	r3, [pc, #264]	; (8000520 <dht11_read+0x26c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	b29a      	uxth	r2, r3
 800041e:	4b41      	ldr	r3, [pc, #260]	; (8000524 <dht11_read+0x270>)
 8000420:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 65 || u16Tim <= 45) {
 8000422:	4b40      	ldr	r3, [pc, #256]	; (8000524 <dht11_read+0x270>)
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	2b40      	cmp	r3, #64	; 0x40
 8000428:	d803      	bhi.n	8000432 <dht11_read+0x17e>
 800042a:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <dht11_read+0x270>)
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	2b2d      	cmp	r3, #45	; 0x2d
 8000430:	d801      	bhi.n	8000436 <dht11_read+0x182>
			return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	e241      	b.n	80008ba <dht11_read+0x606>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000436:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <dht11_read+0x26c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 800043e:	e006      	b.n	800044e <dht11_read+0x19a>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	4836      	ldr	r0, [pc, #216]	; (800051c <dht11_read+0x268>)
 8000444:	f001 f8fa 	bl	800163c <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d005      	beq.n	800045a <dht11_read+0x1a6>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 800044e:	4b34      	ldr	r3, [pc, #208]	; (8000520 <dht11_read+0x26c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000454:	2b4f      	cmp	r3, #79	; 0x4f
 8000456:	d9f3      	bls.n	8000440 <dht11_read+0x18c>
 8000458:	e000      	b.n	800045c <dht11_read+0x1a8>
				break;
 800045a:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 800045c:	4b30      	ldr	r3, [pc, #192]	; (8000520 <dht11_read+0x26c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <dht11_read+0x270>)
 8000466:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 80 || u16Tim <= 10) {
 8000468:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <dht11_read+0x270>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2b4f      	cmp	r3, #79	; 0x4f
 800046e:	d803      	bhi.n	8000478 <dht11_read+0x1c4>
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <dht11_read+0x270>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d801      	bhi.n	800047c <dht11_read+0x1c8>
			return 0;
 8000478:	2300      	movs	r3, #0
 800047a:	e21e      	b.n	80008ba <dht11_read+0x606>
		}
		u8Buff[0] <<= 1;
 800047c:	4b2b      	ldr	r3, [pc, #172]	; (800052c <dht11_read+0x278>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <dht11_read+0x278>)
 8000486:	701a      	strb	r2, [r3, #0]
		if (u16Tim > 45) {
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <dht11_read+0x270>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	2b2d      	cmp	r3, #45	; 0x2d
 800048e:	d907      	bls.n	80004a0 <dht11_read+0x1ec>
			//Nhan bit 1
			u8Buff[0] |= 1;
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <dht11_read+0x278>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	b2da      	uxtb	r2, r3
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <dht11_read+0x278>)
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e006      	b.n	80004ae <dht11_read+0x1fa>
		} else {
			//nhan bit 0
			u8Buff[0] &= ~1;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <dht11_read+0x278>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	f023 0301 	bic.w	r3, r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <dht11_read+0x278>)
 80004ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <dht11_read+0x274>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <dht11_read+0x274>)
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <dht11_read+0x274>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b07      	cmp	r3, #7
 80004c0:	d996      	bls.n	80003f0 <dht11_read+0x13c>
		}
	}
	//Nhan byte so 2
	for (i = 0; i < 8; i++) {
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <dht11_read+0x274>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	e06f      	b.n	80005aa <dht11_read+0x2f6>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <dht11_read+0x26c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80004d2:	e006      	b.n	80004e2 <dht11_read+0x22e>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	4811      	ldr	r0, [pc, #68]	; (800051c <dht11_read+0x268>)
 80004d8:	f001 f8b0 	bl	800163c <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d105      	bne.n	80004ee <dht11_read+0x23a>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <dht11_read+0x26c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e8:	2b40      	cmp	r3, #64	; 0x40
 80004ea:	d9f3      	bls.n	80004d4 <dht11_read+0x220>
 80004ec:	e000      	b.n	80004f0 <dht11_read+0x23c>
				break;
 80004ee:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <dht11_read+0x26c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <dht11_read+0x270>)
 80004fa:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 65 || u16Tim <= 45) {
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <dht11_read+0x270>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	2b40      	cmp	r3, #64	; 0x40
 8000502:	d803      	bhi.n	800050c <dht11_read+0x258>
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <dht11_read+0x270>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b2d      	cmp	r3, #45	; 0x2d
 800050a:	d801      	bhi.n	8000510 <dht11_read+0x25c>
			return 0;
 800050c:	2300      	movs	r3, #0
 800050e:	e1d4      	b.n	80008ba <dht11_read+0x606>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <dht11_read+0x26c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 8000518:	e011      	b.n	800053e <dht11_read+0x28a>
 800051a:	bf00      	nop
 800051c:	40010800 	.word	0x40010800
 8000520:	20000098 	.word	0x20000098
 8000524:	200000e2 	.word	0x200000e2
 8000528:	200000e0 	.word	0x200000e0
 800052c:	200000e4 	.word	0x200000e4
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	4898      	ldr	r0, [pc, #608]	; (8000794 <dht11_read+0x4e0>)
 8000534:	f001 f882 	bl	800163c <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d005      	beq.n	800054a <dht11_read+0x296>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 800053e:	4b96      	ldr	r3, [pc, #600]	; (8000798 <dht11_read+0x4e4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000544:	2b4f      	cmp	r3, #79	; 0x4f
 8000546:	d9f3      	bls.n	8000530 <dht11_read+0x27c>
 8000548:	e000      	b.n	800054c <dht11_read+0x298>
				break;
 800054a:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 800054c:	4b92      	ldr	r3, [pc, #584]	; (8000798 <dht11_read+0x4e4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	4b91      	ldr	r3, [pc, #580]	; (800079c <dht11_read+0x4e8>)
 8000556:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 80 || u16Tim <= 10) {
 8000558:	4b90      	ldr	r3, [pc, #576]	; (800079c <dht11_read+0x4e8>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	2b4f      	cmp	r3, #79	; 0x4f
 800055e:	d803      	bhi.n	8000568 <dht11_read+0x2b4>
 8000560:	4b8e      	ldr	r3, [pc, #568]	; (800079c <dht11_read+0x4e8>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	2b0a      	cmp	r3, #10
 8000566:	d801      	bhi.n	800056c <dht11_read+0x2b8>
			return 0;
 8000568:	2300      	movs	r3, #0
 800056a:	e1a6      	b.n	80008ba <dht11_read+0x606>
		}
		u8Buff[1] <<= 1;
 800056c:	4b8c      	ldr	r3, [pc, #560]	; (80007a0 <dht11_read+0x4ec>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b8a      	ldr	r3, [pc, #552]	; (80007a0 <dht11_read+0x4ec>)
 8000576:	705a      	strb	r2, [r3, #1]
		if (u16Tim > 45) {
 8000578:	4b88      	ldr	r3, [pc, #544]	; (800079c <dht11_read+0x4e8>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b2d      	cmp	r3, #45	; 0x2d
 800057e:	d907      	bls.n	8000590 <dht11_read+0x2dc>
			//Nhan bit 1
			u8Buff[1] |= 1;
 8000580:	4b87      	ldr	r3, [pc, #540]	; (80007a0 <dht11_read+0x4ec>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b85      	ldr	r3, [pc, #532]	; (80007a0 <dht11_read+0x4ec>)
 800058c:	705a      	strb	r2, [r3, #1]
 800058e:	e006      	b.n	800059e <dht11_read+0x2ea>
		} else {
			//nhan bit 0
			u8Buff[1] &= ~1;
 8000590:	4b83      	ldr	r3, [pc, #524]	; (80007a0 <dht11_read+0x4ec>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	f023 0301 	bic.w	r3, r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b81      	ldr	r3, [pc, #516]	; (80007a0 <dht11_read+0x4ec>)
 800059c:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 8; i++) {
 800059e:	4b81      	ldr	r3, [pc, #516]	; (80007a4 <dht11_read+0x4f0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b7f      	ldr	r3, [pc, #508]	; (80007a4 <dht11_read+0x4f0>)
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	4b7e      	ldr	r3, [pc, #504]	; (80007a4 <dht11_read+0x4f0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b07      	cmp	r3, #7
 80005b0:	d98b      	bls.n	80004ca <dht11_read+0x216>
		}
	}
	//Nhan byte so 3
	for (i = 0; i < 8; i++) {
 80005b2:	4b7c      	ldr	r3, [pc, #496]	; (80007a4 <dht11_read+0x4f0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e064      	b.n	8000684 <dht11_read+0x3d0>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <dht11_read+0x4e4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80005c2:	e006      	b.n	80005d2 <dht11_read+0x31e>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4873      	ldr	r0, [pc, #460]	; (8000794 <dht11_read+0x4e0>)
 80005c8:	f001 f838 	bl	800163c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <dht11_read+0x32a>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80005d2:	4b71      	ldr	r3, [pc, #452]	; (8000798 <dht11_read+0x4e4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	2b40      	cmp	r3, #64	; 0x40
 80005da:	d9f3      	bls.n	80005c4 <dht11_read+0x310>
 80005dc:	e000      	b.n	80005e0 <dht11_read+0x32c>
				break;
 80005de:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80005e0:	4b6d      	ldr	r3, [pc, #436]	; (8000798 <dht11_read+0x4e4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b6c      	ldr	r3, [pc, #432]	; (800079c <dht11_read+0x4e8>)
 80005ea:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 65 || u16Tim <= 45) {
 80005ec:	4b6b      	ldr	r3, [pc, #428]	; (800079c <dht11_read+0x4e8>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2b40      	cmp	r3, #64	; 0x40
 80005f2:	d803      	bhi.n	80005fc <dht11_read+0x348>
 80005f4:	4b69      	ldr	r3, [pc, #420]	; (800079c <dht11_read+0x4e8>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2b2d      	cmp	r3, #45	; 0x2d
 80005fa:	d801      	bhi.n	8000600 <dht11_read+0x34c>
			return 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e15c      	b.n	80008ba <dht11_read+0x606>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000600:	4b65      	ldr	r3, [pc, #404]	; (8000798 <dht11_read+0x4e4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 8000608:	e006      	b.n	8000618 <dht11_read+0x364>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	4861      	ldr	r0, [pc, #388]	; (8000794 <dht11_read+0x4e0>)
 800060e:	f001 f815 	bl	800163c <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <dht11_read+0x370>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 8000618:	4b5f      	ldr	r3, [pc, #380]	; (8000798 <dht11_read+0x4e4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	2b4f      	cmp	r3, #79	; 0x4f
 8000620:	d9f3      	bls.n	800060a <dht11_read+0x356>
 8000622:	e000      	b.n	8000626 <dht11_read+0x372>
				break;
 8000624:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 8000626:	4b5c      	ldr	r3, [pc, #368]	; (8000798 <dht11_read+0x4e4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b5b      	ldr	r3, [pc, #364]	; (800079c <dht11_read+0x4e8>)
 8000630:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 80 || u16Tim <= 10) {
 8000632:	4b5a      	ldr	r3, [pc, #360]	; (800079c <dht11_read+0x4e8>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	2b4f      	cmp	r3, #79	; 0x4f
 8000638:	d803      	bhi.n	8000642 <dht11_read+0x38e>
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <dht11_read+0x4e8>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	2b0a      	cmp	r3, #10
 8000640:	d801      	bhi.n	8000646 <dht11_read+0x392>
			return 0;
 8000642:	2300      	movs	r3, #0
 8000644:	e139      	b.n	80008ba <dht11_read+0x606>
		}
		u8Buff[2] <<= 1;
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <dht11_read+0x4ec>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b54      	ldr	r3, [pc, #336]	; (80007a0 <dht11_read+0x4ec>)
 8000650:	709a      	strb	r2, [r3, #2]
		if (u16Tim > 45) {
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <dht11_read+0x4e8>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	2b2d      	cmp	r3, #45	; 0x2d
 8000658:	d907      	bls.n	800066a <dht11_read+0x3b6>
			//Nhan bit 1
			u8Buff[2] |= 1;
 800065a:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <dht11_read+0x4ec>)
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <dht11_read+0x4ec>)
 8000666:	709a      	strb	r2, [r3, #2]
 8000668:	e006      	b.n	8000678 <dht11_read+0x3c4>
		} else {
			//nhan bit 0
			u8Buff[2] &= ~1;
 800066a:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <dht11_read+0x4ec>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	f023 0301 	bic.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <dht11_read+0x4ec>)
 8000676:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 8; i++) {
 8000678:	4b4a      	ldr	r3, [pc, #296]	; (80007a4 <dht11_read+0x4f0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <dht11_read+0x4f0>)
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <dht11_read+0x4f0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b07      	cmp	r3, #7
 800068a:	d996      	bls.n	80005ba <dht11_read+0x306>
		}
	}
	//Nhan byte so 4
	for (i = 0; i < 8; i++) {
 800068c:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <dht11_read+0x4f0>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e064      	b.n	800075e <dht11_read+0x4aa>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000694:	4b40      	ldr	r3, [pc, #256]	; (8000798 <dht11_read+0x4e4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 800069c:	e006      	b.n	80006ac <dht11_read+0x3f8>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	483c      	ldr	r0, [pc, #240]	; (8000794 <dht11_read+0x4e0>)
 80006a2:	f000 ffcb 	bl	800163c <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <dht11_read+0x404>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 80006ac:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <dht11_read+0x4e4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	2b40      	cmp	r3, #64	; 0x40
 80006b4:	d9f3      	bls.n	800069e <dht11_read+0x3ea>
 80006b6:	e000      	b.n	80006ba <dht11_read+0x406>
				break;
 80006b8:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <dht11_read+0x4e4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b36      	ldr	r3, [pc, #216]	; (800079c <dht11_read+0x4e8>)
 80006c4:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 65 || u16Tim <= 45) {
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <dht11_read+0x4e8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b40      	cmp	r3, #64	; 0x40
 80006cc:	d803      	bhi.n	80006d6 <dht11_read+0x422>
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <dht11_read+0x4e8>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b2d      	cmp	r3, #45	; 0x2d
 80006d4:	d801      	bhi.n	80006da <dht11_read+0x426>
			return 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e0ef      	b.n	80008ba <dht11_read+0x606>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <dht11_read+0x4e4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 80006e2:	e006      	b.n	80006f2 <dht11_read+0x43e>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	482b      	ldr	r0, [pc, #172]	; (8000794 <dht11_read+0x4e0>)
 80006e8:	f000 ffa8 	bl	800163c <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <dht11_read+0x44a>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <dht11_read+0x4e4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	2b4f      	cmp	r3, #79	; 0x4f
 80006fa:	d9f3      	bls.n	80006e4 <dht11_read+0x430>
 80006fc:	e000      	b.n	8000700 <dht11_read+0x44c>
				break;
 80006fe:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <dht11_read+0x4e4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <dht11_read+0x4e8>)
 800070a:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 80 || u16Tim <= 10) {
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <dht11_read+0x4e8>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	2b4f      	cmp	r3, #79	; 0x4f
 8000712:	d803      	bhi.n	800071c <dht11_read+0x468>
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <dht11_read+0x4e8>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b0a      	cmp	r3, #10
 800071a:	d801      	bhi.n	8000720 <dht11_read+0x46c>
			return 0;
 800071c:	2300      	movs	r3, #0
 800071e:	e0cc      	b.n	80008ba <dht11_read+0x606>
		}
		u8Buff[3] <<= 1;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <dht11_read+0x4ec>)
 8000722:	78db      	ldrb	r3, [r3, #3]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <dht11_read+0x4ec>)
 800072a:	70da      	strb	r2, [r3, #3]
		if (u16Tim > 45) {
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <dht11_read+0x4e8>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2b2d      	cmp	r3, #45	; 0x2d
 8000732:	d907      	bls.n	8000744 <dht11_read+0x490>
			//Nhan bit 1
			u8Buff[3] |= 1;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <dht11_read+0x4ec>)
 8000736:	78db      	ldrb	r3, [r3, #3]
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <dht11_read+0x4ec>)
 8000740:	70da      	strb	r2, [r3, #3]
 8000742:	e006      	b.n	8000752 <dht11_read+0x49e>
		} else {
			//nhan bit 0
			u8Buff[3] &= ~1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <dht11_read+0x4ec>)
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <dht11_read+0x4ec>)
 8000750:	70da      	strb	r2, [r3, #3]
	for (i = 0; i < 8; i++) {
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <dht11_read+0x4f0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <dht11_read+0x4f0>)
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <dht11_read+0x4f0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d996      	bls.n	8000694 <dht11_read+0x3e0>
		}
	}
	//Nhan byte so 5
	for (i = 0; i < 8; i++) {
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <dht11_read+0x4f0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e06f      	b.n	800084e <dht11_read+0x59a>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <dht11_read+0x4e4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 8000776:	e006      	b.n	8000786 <dht11_read+0x4d2>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <dht11_read+0x4e0>)
 800077c:	f000 ff5e 	bl	800163c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d110      	bne.n	80007a8 <dht11_read+0x4f4>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 65) {
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <dht11_read+0x4e4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	2b40      	cmp	r3, #64	; 0x40
 800078e:	d9f3      	bls.n	8000778 <dht11_read+0x4c4>
 8000790:	e00b      	b.n	80007aa <dht11_read+0x4f6>
 8000792:	bf00      	nop
 8000794:	40010800 	.word	0x40010800
 8000798:	20000098 	.word	0x20000098
 800079c:	200000e2 	.word	0x200000e2
 80007a0:	200000e4 	.word	0x200000e4
 80007a4:	200000e0 	.word	0x200000e0
				break;
 80007a8:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <dht11_read+0x610>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <dht11_read+0x614>)
 80007b4:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 65 || u16Tim <= 45) {
 80007b6:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <dht11_read+0x614>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	2b40      	cmp	r3, #64	; 0x40
 80007bc:	d803      	bhi.n	80007c6 <dht11_read+0x512>
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <dht11_read+0x614>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	2b2d      	cmp	r3, #45	; 0x2d
 80007c4:	d801      	bhi.n	80007ca <dht11_read+0x516>
			return 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e077      	b.n	80008ba <dht11_read+0x606>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <dht11_read+0x610>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 80007d2:	e006      	b.n	80007e2 <dht11_read+0x52e>
			if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	483d      	ldr	r0, [pc, #244]	; (80008cc <dht11_read+0x618>)
 80007d8:	f000 ff30 	bl	800163c <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <dht11_read+0x53a>
		while (__HAL_TIM_GET_COUNTER(&htim2) < 80) {
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <dht11_read+0x610>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e8:	2b4f      	cmp	r3, #79	; 0x4f
 80007ea:	d9f3      	bls.n	80007d4 <dht11_read+0x520>
 80007ec:	e000      	b.n	80007f0 <dht11_read+0x53c>
				break;
 80007ee:	bf00      	nop
			}
		}
		u16Tim = __HAL_TIM_GET_COUNTER(&htim2);
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <dht11_read+0x610>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <dht11_read+0x614>)
 80007fa:	801a      	strh	r2, [r3, #0]
		if (u16Tim >= 80 || u16Tim <= 10) {
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <dht11_read+0x614>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	2b4f      	cmp	r3, #79	; 0x4f
 8000802:	d803      	bhi.n	800080c <dht11_read+0x558>
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <dht11_read+0x614>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2b0a      	cmp	r3, #10
 800080a:	d801      	bhi.n	8000810 <dht11_read+0x55c>
			return 0;
 800080c:	2300      	movs	r3, #0
 800080e:	e054      	b.n	80008ba <dht11_read+0x606>
		}
		u8Buff[4] <<= 1;
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <dht11_read+0x61c>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <dht11_read+0x61c>)
 800081a:	711a      	strb	r2, [r3, #4]
		if (u16Tim > 45) {
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <dht11_read+0x614>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	2b2d      	cmp	r3, #45	; 0x2d
 8000822:	d907      	bls.n	8000834 <dht11_read+0x580>
			//Nhan bit 1
			u8Buff[4] |= 1;
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <dht11_read+0x61c>)
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <dht11_read+0x61c>)
 8000830:	711a      	strb	r2, [r3, #4]
 8000832:	e006      	b.n	8000842 <dht11_read+0x58e>
		} else {
			//nhan bit 0
			u8Buff[4] &= ~1;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <dht11_read+0x61c>)
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <dht11_read+0x61c>)
 8000840:	711a      	strb	r2, [r3, #4]
	for (i = 0; i < 8; i++) {
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <dht11_read+0x620>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <dht11_read+0x620>)
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <dht11_read+0x620>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d98b      	bls.n	800076e <dht11_read+0x4ba>
		}
	}
	// Kiem  tra loi data bang byte so 5
	u8CheckSum = u8Buff[0] + u8Buff[1] + u8Buff[2] + u8Buff[3];
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <dht11_read+0x61c>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <dht11_read+0x61c>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	4413      	add	r3, r2
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <dht11_read+0x61c>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	4413      	add	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <dht11_read+0x61c>)
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	4413      	add	r3, r2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <dht11_read+0x624>)
 8000874:	701a      	strb	r2, [r3, #0]
	if (u8CheckSum != u8Buff[4]) {
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <dht11_read+0x61c>)
 8000878:	791a      	ldrb	r2, [r3, #4]
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <dht11_read+0x624>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d001      	beq.n	8000886 <dht11_read+0x5d2>
		return 0;
 8000882:	2300      	movs	r3, #0
 8000884:	e019      	b.n	80008ba <dht11_read+0x606>
	} else {
		for (i=0; i<4; i++){
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <dht11_read+0x620>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e010      	b.n	80008b0 <dht11_read+0x5fc>
			data[i]=u8Buff[i];
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <dht11_read+0x620>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <dht11_read+0x620>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <dht11_read+0x61c>)
 80008a0:	5c52      	ldrb	r2, [r2, r1]
 80008a2:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++){
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <dht11_read+0x620>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <dht11_read+0x620>)
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <dht11_read+0x620>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d9ea      	bls.n	800088e <dht11_read+0x5da>
		}
	}
	return 1;
 80008b8:	2301      	movs	r3, #1
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000098 	.word	0x20000098
 80008c8:	200000e2 	.word	0x200000e2
 80008cc:	40010800 	.word	0x40010800
 80008d0:	200000e4 	.word	0x200000e4
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	200000e1 	.word	0x200000e1

080008dc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f023 030f 	bic.w	r3, r3, #15
 80008ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f043 030c 	orr.w	r3, r3, #12
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	b2db      	uxtb	r3, r3
 8000906:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	f043 030c 	orr.w	r3, r3, #12
 800090e:	b2db      	uxtb	r3, r3
 8000910:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	b2db      	uxtb	r3, r3
 800091a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800091c:	f107 0208 	add.w	r2, r7, #8
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2304      	movs	r3, #4
 8000926:	214e      	movs	r1, #78	; 0x4e
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <lcd_send_cmd+0x5c>)
 800092a:	f001 f807 	bl	800193c <HAL_I2C_Master_Transmit>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000ec 	.word	0x200000ec

0800093c <lcd_send_data>:

void lcd_send_data (char data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f023 030f 	bic.w	r3, r3, #15
 800094c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f043 030d 	orr.w	r3, r3, #13
 800095a:	b2db      	uxtb	r3, r3
 800095c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	f043 0309 	orr.w	r3, r3, #9
 8000964:	b2db      	uxtb	r3, r3
 8000966:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	f043 030d 	orr.w	r3, r3, #13
 800096e:	b2db      	uxtb	r3, r3
 8000970:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	f043 0309 	orr.w	r3, r3, #9
 8000978:	b2db      	uxtb	r3, r3
 800097a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800097c:	f107 0208 	add.w	r2, r7, #8
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2304      	movs	r3, #4
 8000986:	214e      	movs	r1, #78	; 0x4e
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <lcd_send_data+0x5c>)
 800098a:	f000 ffd7 	bl	800193c <HAL_I2C_Master_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000ec 	.word	0x200000ec

0800099c <lcd_clear>:

void lcd_clear (void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80009a2:	2080      	movs	r0, #128	; 0x80
 80009a4:	f7ff ff9a 	bl	80008dc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	e005      	b.n	80009ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80009ae:	2020      	movs	r0, #32
 80009b0:	f7ff ffc4 	bl	800093c <lcd_send_data>
	for (int i=0; i<70; i++)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b45      	cmp	r3, #69	; 0x45
 80009be:	ddf6      	ble.n	80009ae <lcd_clear+0x12>
	}
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
    switch (row)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <lcd_put_cur+0x16>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <lcd_put_cur+0x20>
 80009dc:	e009      	b.n	80009f2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	603b      	str	r3, [r7, #0]
            break;
 80009e6:	e004      	b.n	80009f2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009ee:	603b      	str	r3, [r7, #0]
            break;
 80009f0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff70 	bl	80008dc <lcd_send_cmd>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <lcd_init>:


void lcd_init (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f000 fbb7 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a0e:	2030      	movs	r0, #48	; 0x30
 8000a10:	f7ff ff64 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a14:	2005      	movs	r0, #5
 8000a16:	f000 fbb1 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a1a:	2030      	movs	r0, #48	; 0x30
 8000a1c:	f7ff ff5e 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fbab 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a26:	2030      	movs	r0, #48	; 0x30
 8000a28:	f7ff ff58 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f000 fba5 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000a32:	2020      	movs	r0, #32
 8000a34:	f7ff ff52 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(10);
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f000 fb9f 	bl	800117c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000a3e:	2028      	movs	r0, #40	; 0x28
 8000a40:	f7ff ff4c 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fb99 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff ff46 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fb93 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff40 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fb8d 	bl	800117c <HAL_Delay>
	HAL_Delay(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f000 fb8a 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a68:	2006      	movs	r0, #6
 8000a6a:	f7ff ff37 	bl	80008dc <lcd_send_cmd>
	HAL_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fb84 	bl	800117c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a74:	200c      	movs	r0, #12
 8000a76:	f7ff ff31 	bl	80008dc <lcd_send_cmd>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a86:	e006      	b.n	8000a96 <lcd_send_string+0x18>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff53 	bl	800093c <lcd_send_data>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f4      	bne.n	8000a88 <lcd_send_string+0xa>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aae:	f000 fb03 	bl	80010b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab2:	f000 f891 	bl	8000bd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab6:	f000 f92d 	bl	8000d14 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000aba:	f000 f8d3 	bl	8000c64 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8000abe:	f000 f8ff 	bl	8000cc0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 8000ac2:	f7ff ff9f 	bl	8000a04 <lcd_init>
	dht11_init();
 8000ac6:	f7ff fbb5 	bl	8000234 <dht11_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t u8MainBuff[4];
	char lcdDisplay[17];
	uint8_t data[]="Nguy hiem! Qua nhiet do cho phep.";
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <main+0x114>)
 8000acc:	1d3c      	adds	r4, r7, #4
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	8023      	strh	r3, [r4, #0]
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4837      	ldr	r0, [pc, #220]	; (8000bc0 <main+0x118>)
 8000ae4:	f000 fdc1 	bl	800166a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aec:	f000 fb46 	bl	800117c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	4832      	ldr	r0, [pc, #200]	; (8000bc0 <main+0x118>)
 8000af8:	f000 fdb7 	bl	800166a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b00:	f000 fb3c 	bl	800117c <HAL_Delay>

		//Kiem tra qua nhiet
		if(u8MainBuff[2]>=40){
 8000b04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b08:	2b27      	cmp	r3, #39	; 0x27
 8000b0a:	d919      	bls.n	8000b40 <main+0x98>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2120      	movs	r1, #32
 8000b10:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <main+0x11c>)
 8000b12:	f000 fdaa 	bl	800166a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);//kich led do
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	482a      	ldr	r0, [pc, #168]	; (8000bc4 <main+0x11c>)
 8000b1a:	f000 fdbe 	bl	800169a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);//kich role dk quat
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2110      	movs	r1, #16
 8000b22:	4828      	ldr	r0, [pc, #160]	; (8000bc4 <main+0x11c>)
 8000b24:	f000 fda1 	bl	800166a <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, data, strlen((char*)data), 100);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb0e 	bl	800014c <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	1d39      	adds	r1, r7, #4
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	4823      	ldr	r0, [pc, #140]	; (8000bc8 <main+0x120>)
 8000b3a:	f002 f916 	bl	8002d6a <HAL_UART_Transmit>
 8000b3e:	e00e      	b.n	8000b5e <main+0xb6>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <main+0x11c>)
 8000b46:	f000 fd90 	bl	800166a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <main+0x11c>)
 8000b50:	f000 fd8b 	bl	800166a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <main+0x11c>)
 8000b5a:	f000 fd86 	bl	800166a <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 8000b5e:	2064      	movs	r0, #100	; 0x64
 8000b60:	f000 fb0c 	bl	800117c <HAL_Delay>
		//Hien thi nhiet do
		if (dht11_read(u8MainBuff)) {
 8000b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fba3 	bl	80002b4 <dht11_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d019      	beq.n	8000ba8 <main+0x100>
			sprintf(lcdDisplay, "Nhiet do: %dC", u8MainBuff[2]);
 8000b74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	4913      	ldr	r1, [pc, #76]	; (8000bcc <main+0x124>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fa8f 	bl	80030a4 <siprintf>
			lcd_put_cur(0, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff1d 	bl	80009c8 <lcd_put_cur>
			lcd_send_string("   Dinh Khanh  ");
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <main+0x128>)
 8000b90:	f7ff ff75 	bl	8000a7e <lcd_send_string>
			lcd_put_cur(1, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff16 	bl	80009c8 <lcd_put_cur>
			lcd_send_string(lcdDisplay);
 8000b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff6c 	bl	8000a7e <lcd_send_string>
 8000ba6:	e799      	b.n	8000adc <main+0x34>

		} else {
			lcd_clear();
 8000ba8:	f7ff fef8 	bl	800099c <lcd_clear>
			lcd_put_cur(0, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff0a 	bl	80009c8 <lcd_put_cur>
			lcd_send_string("      ERROR  ");
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <main+0x12c>)
 8000bb6:	f7ff ff62 	bl	8000a7e <lcd_send_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000bba:	e78f      	b.n	8000adc <main+0x34>
 8000bbc:	08003910 	.word	0x08003910
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	20000140 	.word	0x20000140
 8000bcc:	080038e0 	.word	0x080038e0
 8000bd0:	080038f0 	.word	0x080038f0
 8000bd4:	08003900 	.word	0x08003900

08000bd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	; 0x40
 8000bdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fa54 	bl	8003094 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c02:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f991 	bl	8001f48 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x58>
		Error_Handler();
 8000c2c:	f7ff fa96 	bl	800015c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fbfc 	bl	8002448 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x82>
		Error_Handler();
 8000c56:	f7ff fa81 	bl	800015c <Error_Handler>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3740      	adds	r7, #64	; 0x40
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <MX_I2C1_Init+0x54>)
 8000c6c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_I2C1_Init+0x58>)
 8000c72:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c86:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000ca2:	f000 fd13 	bl	80016cc <HAL_I2C_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000cac:	f7ff fa56 	bl	800015c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000ec 	.word	0x200000ec
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	000186a0 	.word	0x000186a0

08000cc0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART2_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f001 ffea 	bl	8002cd0 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000d02:	f7ff fa2b 	bl	800015c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000140 	.word	0x20000140
 8000d10:	40004400 	.word	0x40004400

08000d14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_GPIO_Init+0xb4>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d78:	f000 fc77 	bl	800166a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2170      	movs	r1, #112	; 0x70
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_GPIO_Init+0xbc>)
 8000d82:	f000 fc72 	bl	800166a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000da0:	f000 faf2 	bl	8001388 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000da4:	2370      	movs	r3, #112	; 0x70
 8000da6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_GPIO_Init+0xbc>)
 8000dbc:	f000 fae4 	bl	8001388 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_MspInit+0x5c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_MspInit+0x5c>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x5c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x5c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x5c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x60>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_MspInit+0x60>)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_I2C_MspInit+0x90>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d132      	bne.n	8000ebe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e76:	2312      	movs	r3, #18
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <HAL_I2C_MspInit+0x98>)
 8000e86:	f000 fa7f 	bl	8001388 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_I2C_MspInit+0x9c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x9c>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_I2C_MspInit+0x94>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_TIM_Base_MspInit+0x34>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_TIM_Base_MspInit+0x34>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_TIM_Base_MspInit+0x34>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d12f      	bne.n	8000f90 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3a:	61d3      	str	r3, [r2, #28]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f60:	2304      	movs	r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f74:	f000 fa08 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f8c:	f000 f9fc 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f8ab 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f002 f80c 	bl	8003040 <__errno>
 8001028:	4602      	mov	r2, r0
 800102a:	230c      	movs	r3, #12
 800102c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005000 	.word	0x20005000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000008c 	.word	0x2000008c
 800105c:	20000190 	.word	0x20000190

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	; (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001092:	f7ff ffe5 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f001 ffd9 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fd05 	bl	8000aa8 <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a8:	0800399c 	.word	0x0800399c
  ldr r2, =_sbss
 80010ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b0:	2000018c 	.word	0x2000018c

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f929 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fe7e 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f933 	bl	800136e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f909 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000008 	.word	0x20000008
 8001164:	20000184 	.word	0x20000184

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000184 	.word	0x20000184

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff0 	bl	8001168 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_Delay+0x40>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffe0 	bl	8001168 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff90 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff49 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff5e 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb0 	bl	80012dc <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b08b      	sub	sp, #44	; 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	e127      	b.n	80015ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800139c:	2201      	movs	r2, #1
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8116 	bne.w	80015e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d034      	beq.n	800142c <HAL_GPIO_Init+0xa4>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d80d      	bhi.n	80013e2 <HAL_GPIO_Init+0x5a>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x9a>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d804      	bhi.n	80013d8 <HAL_GPIO_Init+0x50>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d031      	beq.n	8001436 <HAL_GPIO_Init+0xae>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d01c      	beq.n	8001410 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d6:	e048      	b.n	800146a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d043      	beq.n	8001464 <HAL_GPIO_Init+0xdc>
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d01b      	beq.n	8001418 <HAL_GPIO_Init+0x90>
          break;
 80013e0:	e043      	b.n	800146a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013e2:	4a89      	ldr	r2, [pc, #548]	; (8001608 <HAL_GPIO_Init+0x280>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d026      	beq.n	8001436 <HAL_GPIO_Init+0xae>
 80013e8:	4a87      	ldr	r2, [pc, #540]	; (8001608 <HAL_GPIO_Init+0x280>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d806      	bhi.n	80013fc <HAL_GPIO_Init+0x74>
 80013ee:	4a87      	ldr	r2, [pc, #540]	; (800160c <HAL_GPIO_Init+0x284>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d020      	beq.n	8001436 <HAL_GPIO_Init+0xae>
 80013f4:	4a86      	ldr	r2, [pc, #536]	; (8001610 <HAL_GPIO_Init+0x288>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01d      	beq.n	8001436 <HAL_GPIO_Init+0xae>
          break;
 80013fa:	e036      	b.n	800146a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013fc:	4a85      	ldr	r2, [pc, #532]	; (8001614 <HAL_GPIO_Init+0x28c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0xae>
 8001402:	4a85      	ldr	r2, [pc, #532]	; (8001618 <HAL_GPIO_Init+0x290>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d016      	beq.n	8001436 <HAL_GPIO_Init+0xae>
 8001408:	4a84      	ldr	r2, [pc, #528]	; (800161c <HAL_GPIO_Init+0x294>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0xae>
          break;
 800140e:	e02c      	b.n	800146a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e028      	b.n	800146a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	3304      	adds	r3, #4
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e023      	b.n	800146a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	3308      	adds	r3, #8
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e01e      	b.n	800146a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	330c      	adds	r3, #12
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e019      	b.n	800146a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143e:	2304      	movs	r3, #4
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e012      	b.n	800146a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	611a      	str	r2, [r3, #16]
          break;
 8001456:	e008      	b.n	800146a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	615a      	str	r2, [r3, #20]
          break;
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2bff      	cmp	r3, #255	; 0xff
 800146e:	d801      	bhi.n	8001474 <HAL_GPIO_Init+0xec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	e001      	b.n	8001478 <HAL_GPIO_Init+0xf0>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2bff      	cmp	r3, #255	; 0xff
 800147e:	d802      	bhi.n	8001486 <HAL_GPIO_Init+0xfe>
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x104>
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	3b08      	subs	r3, #8
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	210f      	movs	r1, #15
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	401a      	ands	r2, r3
 800149e:	6a39      	ldr	r1, [r7, #32]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	431a      	orrs	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8096 	beq.w	80015e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ba:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_GPIO_Init+0x298>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_GPIO_Init+0x298>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_GPIO_Init+0x298>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d2:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x29c>)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x2a0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x19e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x2a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x19a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a49      	ldr	r2, [pc, #292]	; (8001630 <HAL_GPIO_Init+0x2a8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x196>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a48      	ldr	r2, [pc, #288]	; (8001634 <HAL_GPIO_Init+0x2ac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x192>
 8001516:	2303      	movs	r3, #3
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x1a0>
 800151a:	2304      	movs	r3, #4
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x1a0>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x1a0>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x1a0>
 8001526:	2300      	movs	r3, #0
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001538:	493a      	ldr	r1, [pc, #232]	; (8001624 <HAL_GPIO_Init+0x29c>)
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4938      	ldr	r1, [pc, #224]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	43db      	mvns	r3, r3
 8001568:	4933      	ldr	r1, [pc, #204]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 800156a:	4013      	ands	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	492e      	ldr	r1, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e006      	b.n	8001596 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	43db      	mvns	r3, r3
 8001590:	4929      	ldr	r1, [pc, #164]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 8001592:	4013      	ands	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4924      	ldr	r1, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	491f      	ldr	r1, [pc, #124]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	491a      	ldr	r1, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	43db      	mvns	r3, r3
 80015e0:	4915      	ldr	r1, [pc, #84]	; (8001638 <HAL_GPIO_Init+0x2b0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f aed0 	bne.w	800139c <HAL_GPIO_Init+0x14>
  }
}
 80015fc:	bf00      	nop
 80015fe:	372c      	adds	r7, #44	; 0x2c
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	10210000 	.word	0x10210000
 800160c:	10110000 	.word	0x10110000
 8001610:	10120000 	.word	0x10120000
 8001614:	10310000 	.word	0x10310000
 8001618:	10320000 	.word	0x10320000
 800161c:	10220000 	.word	0x10220000
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011000 	.word	0x40011000
 8001634:	40011400 	.word	0x40011400
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	4613      	mov	r3, r2
 8001678:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167a:	787b      	ldrb	r3, [r7, #1]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001686:	e003      	b.n	8001690 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	400b      	ands	r3, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e11f      	b.n	800191e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fba0 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	; 0x24
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800171e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800172e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001730:	f000 ffe0 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8001734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a7b      	ldr	r2, [pc, #492]	; (8001928 <HAL_I2C_Init+0x25c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d807      	bhi.n	8001750 <HAL_I2C_Init+0x84>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a7a      	ldr	r2, [pc, #488]	; (800192c <HAL_I2C_Init+0x260>)
 8001744:	4293      	cmp	r3, r2
 8001746:	bf94      	ite	ls
 8001748:	2301      	movls	r3, #1
 800174a:	2300      	movhi	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e006      	b.n	800175e <HAL_I2C_Init+0x92>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4a77      	ldr	r2, [pc, #476]	; (8001930 <HAL_I2C_Init+0x264>)
 8001754:	4293      	cmp	r3, r2
 8001756:	bf94      	ite	ls
 8001758:	2301      	movls	r3, #1
 800175a:	2300      	movhi	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0db      	b.n	800191e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4a72      	ldr	r2, [pc, #456]	; (8001934 <HAL_I2C_Init+0x268>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9b      	lsrs	r3, r3, #18
 8001770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a64      	ldr	r2, [pc, #400]	; (8001928 <HAL_I2C_Init+0x25c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d802      	bhi.n	80017a0 <HAL_I2C_Init+0xd4>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3301      	adds	r3, #1
 800179e:	e009      	b.n	80017b4 <HAL_I2C_Init+0xe8>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_I2C_Init+0x26c>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	3301      	adds	r3, #1
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4956      	ldr	r1, [pc, #344]	; (8001928 <HAL_I2C_Init+0x25c>)
 80017d0:	428b      	cmp	r3, r1
 80017d2:	d80d      	bhi.n	80017f0 <HAL_I2C_Init+0x124>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e59      	subs	r1, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	bf38      	it	cc
 80017ec:	2304      	movcc	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1c4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x150>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x176>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x17e>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1c4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1a4>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1c4>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	817b      	strh	r3, [r7, #10]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fc0a 	bl	8001168 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b20      	cmp	r3, #32
 8001960:	f040 80e0 	bne.w	8001b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2319      	movs	r3, #25
 800196a:	2201      	movs	r2, #1
 800196c:	4970      	ldr	r1, [pc, #448]	; (8001b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f964 	bl	8001c3c <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	e0d3      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_I2C_Master_Transmit+0x50>
 8001988:	2302      	movs	r3, #2
 800198a:	e0cc      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d007      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2221      	movs	r2, #33	; 0x21
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2210      	movs	r2, #16
 80019ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	893a      	ldrh	r2, [r7, #8]
 80019e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f89c 	bl	8001b38 <I2C_MasterRequestWrite>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e08d      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a20:	e066      	b.n	8001af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f9de 	bl	8001de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00d      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d107      	bne.n	8001a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06b      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x188>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6a39      	ldr	r1, [r7, #32]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f9ce 	bl	8001e6a <I2C_WaitOnBTFFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00d      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d107      	bne.n	8001aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e01a      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d194      	bne.n	8001a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	00100002 	.word	0x00100002
 8001b34:	ffff0000 	.word	0xffff0000

08001b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	460b      	mov	r3, r1
 8001b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d006      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d003      	beq.n	8001b62 <I2C_MasterRequestWrite+0x2a>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b60:	d108      	bne.n	8001b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00b      	b.n	8001b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d107      	bne.n	8001b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f84f 	bl	8001c3c <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb2:	d103      	bne.n	8001bbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e035      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc8:	d108      	bne.n	8001bdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	e01b      	b.n	8001c14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bdc:	897b      	ldrh	r3, [r7, #10]
 8001bde:	11db      	asrs	r3, r3, #7
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0306 	and.w	r3, r3, #6
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f063 030f 	orn	r3, r3, #15
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <I2C_MasterRequestWrite+0xfc>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f875 	bl	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e010      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <I2C_MasterRequestWrite+0x100>)
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f865 	bl	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00010008 	.word	0x00010008
 8001c38:	00010002 	.word	0x00010002

08001c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c4c:	e025      	b.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d021      	beq.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff fa87 	bl	8001168 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e023      	b.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10d      	bne.n	8001cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	e00c      	b.n	8001cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d0b6      	beq.n	8001c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf8:	e051      	b.n	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d08:	d123      	bne.n	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f043 0204 	orr.w	r2, r3, #4
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e046      	b.n	8001de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d021      	beq.n	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff fa05 	bl	8001168 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d116      	bne.n	8001d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e020      	b.n	8001de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10c      	bne.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e00b      	b.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d18d      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df4:	e02d      	b.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f878 	bl	8001eec <I2C_IsAcknowledgeFailed>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e02d      	b.n	8001e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff f9ab 	bl	8001168 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e007      	b.n	8001e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d1ca      	bne.n	8001df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e76:	e02d      	b.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f837 	bl	8001eec <I2C_IsAcknowledgeFailed>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02d      	b.n	8001ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8e:	d021      	beq.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e90:	f7ff f96a 	bl	8001168 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d302      	bcc.n	8001ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e007      	b.n	8001ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d1ca      	bne.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	d11b      	bne.n	8001f3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0204 	orr.w	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e26c      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f74:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <HAL_RCC_OscConfig+0x12c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d168      	bne.n	8002074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e246      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x76>
 8001fb0:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7f      	ldr	r2, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e02e      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a77      	ldr	r2, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0xbc>
 8001fea:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6a      	ldr	r2, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a67      	ldr	r2, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f8a0 	bl	8001168 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f89c 	bl	8001168 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1fa      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xe4>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f88c 	bl	8001168 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f888 	bl	8001168 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1e6      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x10c>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1ba      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4939      	ldr	r1, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff f841 	bl	8001168 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f83d 	bl	8001168 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e19b      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f820 	bl	8001168 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f81c 	bl	8001168 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e17a      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03a      	beq.n	80021cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f800 	bl	8001168 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fffc 	bl	8001168 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e15a      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 fada 	bl	8002744 <RCC_Delay>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe ffe6 	bl	8001168 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe ffe2 	bl	8001168 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e140      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	42420000 	.word	0x42420000
 80021bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b9e      	ldr	r3, [pc, #632]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a6 	beq.w	8002326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b97      	ldr	r3, [pc, #604]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b94      	ldr	r3, [pc, #592]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a93      	ldr	r2, [pc, #588]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b91      	ldr	r3, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b8e      	ldr	r3, [pc, #568]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8a      	ldr	r2, [pc, #552]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe ffa3 	bl	8001168 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe ff9f 	bl	8001168 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0fd      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x312>
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a7a      	ldr	r2, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x334>
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a72      	ldr	r2, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x356>
 8002284:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a6c      	ldr	r2, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a66      	ldr	r2, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b64      	ldr	r3, [pc, #400]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe ff53 	bl	8001168 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe ff4f 	bl	8001168 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0ab      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4b57      	ldr	r3, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ee      	beq.n	80022c6 <HAL_RCC_OscConfig+0x37e>
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff3d 	bl	8001168 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe ff39 	bl	8001168 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e095      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b48      	ldr	r3, [pc, #288]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8081 	beq.w	8002432 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d061      	beq.n	8002400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d146      	bne.n	80023d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe ff0d 	bl	8001168 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe ff09 	bl	8001168 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e067      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d108      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	492d      	ldr	r1, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a19      	ldr	r1, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	430b      	orrs	r3, r1
 800239e:	4927      	ldr	r1, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fedd 	bl	8001168 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fed9 	bl	8001168 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e037      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 80023d0:	e02f      	b.n	8002432 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fec6 	bl	8001168 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fec2 	bl	8001168 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e020      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x498>
 80023fe:	e018      	b.n	8002432 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
 8002444:	42420060 	.word	0x42420060

08002448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0d0      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d910      	bls.n	800248c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4965      	ldr	r1, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d040      	beq.n	8002568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d115      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e073      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4936      	ldr	r1, [pc, #216]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002538:	f7fe fe16 	bl	8001168 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7fe fe12 	bl	8001168 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e053      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d210      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4922      	ldr	r1, [pc, #136]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4601      	mov	r1, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	fa21 f303 	lsr.w	r3, r1, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fd74 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	08003948 	.word	0x08003948
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b490      	push	{r4, r7}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002624:	1d3c      	adds	r4, r7, #4
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x40>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x46>
 800265a:	e02d      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800265e:	623b      	str	r3, [r7, #32]
      break;
 8002660:	e02d      	b.n	80026be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	0c9b      	lsrs	r3, r3, #18
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800266e:	4413      	add	r3, r2
 8002670:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002674:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0c5b      	lsrs	r3, r3, #17
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800268e:	4413      	add	r3, r2
 8002690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800269a:	fb02 f203 	mul.w	r2, r2, r3
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e004      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	623b      	str	r3, [r7, #32]
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ba:	623b      	str	r3, [r7, #32]
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6a3b      	ldr	r3, [r7, #32]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc90      	pop	{r4, r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	08003934 	.word	0x08003934
 80026d0:	08003944 	.word	0x08003944
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200
 80026dc:	003d0900 	.word	0x003d0900

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000000 	.word	0x20000000

080026f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f8:	f7ff fff2 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4601      	mov	r1, r0
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08003958 	.word	0x08003958

0800271c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002720:	f7ff ffde 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002724:	4601      	mov	r1, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0adb      	lsrs	r3, r3, #11
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08003958 	.word	0x08003958

08002744 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <RCC_Delay+0x34>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <RCC_Delay+0x38>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0a5b      	lsrs	r3, r3, #9
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002760:	bf00      	nop
  }
  while (Delay --);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	60fa      	str	r2, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f9      	bne.n	8002760 <RCC_Delay+0x1c>
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000000 	.word	0x20000000
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e041      	b.n	8002816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fb96 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 f930 	bl	8002a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIM_Base_Start+0x88>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_TIM_Base_Start+0x48>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d009      	beq.n	8002868 <HAL_TIM_Base_Start+0x48>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_TIM_Base_Start+0x8c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_TIM_Base_Start+0x48>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_TIM_Base_Start+0x90>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d010      	beq.n	800289c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	e007      	b.n	800289c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800

080028b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIM_ConfigClockSource+0x18>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0a6      	b.n	8002a1a <HAL_TIM_ConfigClockSource+0x166>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d067      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0x120>
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d80b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x6c>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d073      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x140>
 800290c:	2b10      	cmp	r3, #16
 800290e:	d802      	bhi.n	8002916 <HAL_TIM_ConfigClockSource+0x62>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d06f      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002914:	e078      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002916:	2b20      	cmp	r3, #32
 8002918:	d06c      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x140>
 800291a:	2b30      	cmp	r3, #48	; 0x30
 800291c:	d06a      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800291e:	e073      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d00d      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0x8c>
 8002924:	2b70      	cmp	r3, #112	; 0x70
 8002926:	d804      	bhi.n	8002932 <HAL_TIM_ConfigClockSource+0x7e>
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d033      	beq.n	8002994 <HAL_TIM_ConfigClockSource+0xe0>
 800292c:	2b60      	cmp	r3, #96	; 0x60
 800292e:	d041      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002930:	e06a      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d066      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x152>
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293c:	d017      	beq.n	800296e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800293e:	e063      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f000 f941 	bl	8002bd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002962:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]
      break;
 800296c:	e04c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f000 f92a 	bl	8002bd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002990:	609a      	str	r2, [r3, #8]
      break;
 8002992:	e039      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f000 f8a1 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2150      	movs	r1, #80	; 0x50
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f8f8 	bl	8002ba2 <TIM_ITRx_SetConfig>
      break;
 80029b2:	e029      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	461a      	mov	r2, r3
 80029c2:	f000 f8bf 	bl	8002b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2160      	movs	r1, #96	; 0x60
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f8e8 	bl	8002ba2 <TIM_ITRx_SetConfig>
      break;
 80029d2:	e019      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f000 f881 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f8d8 	bl	8002ba2 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e009      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	f000 f8cf 	bl	8002ba2 <TIM_ITRx_SetConfig>
        break;
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <TIM_Base_SetConfig+0xb8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <TIM_Base_SetConfig+0x30>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d007      	beq.n	8002a54 <TIM_Base_SetConfig+0x30>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <TIM_Base_SetConfig+0xbc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0x30>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <TIM_Base_SetConfig+0xc0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d108      	bne.n	8002a66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <TIM_Base_SetConfig+0xb8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <TIM_Base_SetConfig+0x62>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d007      	beq.n	8002a86 <TIM_Base_SetConfig+0x62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_Base_SetConfig+0xbc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_Base_SetConfig+0x62>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <TIM_Base_SetConfig+0xc0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d108      	bne.n	8002a98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a07      	ldr	r2, [pc, #28]	; (8002adc <TIM_Base_SetConfig+0xb8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d103      	bne.n	8002acc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800

08002ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 030a 	bic.w	r3, r3, #10
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 0210 	bic.w	r2, r3, #16
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	031b      	lsls	r3, r3, #12
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f043 0307 	orr.w	r3, r3, #7
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b087      	sub	sp, #28
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e046      	b.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d009      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e03f      	b.n	8002d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe f90a 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f905 	bl	8002f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	; 0x28
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d17c      	bne.n	8002e84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_Transmit+0x2c>
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e075      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x3e>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e06e      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2221      	movs	r2, #33	; 0x21
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe f9d3 	bl	8001168 <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d108      	bne.n	8002dec <HAL_UART_Transmit+0x82>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e003      	b.n	8002df4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dfc:	e02a      	b.n	8002e54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f840 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e036      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3302      	adds	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e007      	b.n	8002e46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cf      	bne.n	8002dfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f810 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9e:	e02c      	b.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d028      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eae:	f7fe f95b 	bl	8001168 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d21d      	bcs.n	8002efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d0c3      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f5e:	f023 030c 	bic.w	r3, r3, #12
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <UART_SetConfig+0x114>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f8c:	f7ff fbc6 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f94:	f7ff fbae 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8002f98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <UART_SetConfig+0x118>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	0119      	lsls	r1, r3, #4
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <UART_SetConfig+0x118>)
 8002fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <UART_SetConfig+0x118>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	4419      	add	r1, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009a      	lsls	r2, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fbb2 f2f3 	udiv	r2, r2, r3
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <UART_SetConfig+0x118>)
 800300a:	fba3 0302 	umull	r0, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2064      	movs	r0, #100	; 0x64
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	3332      	adds	r3, #50	; 0x32
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <UART_SetConfig+0x118>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	440a      	add	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40013800 	.word	0x40013800
 800303c:	51eb851f 	.word	0x51eb851f

08003040 <__errno>:
 8003040:	4b01      	ldr	r3, [pc, #4]	; (8003048 <__errno+0x8>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	2000000c 	.word	0x2000000c

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2500      	movs	r5, #0
 8003050:	4e0c      	ldr	r6, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1ba4      	subs	r4, r4, r6
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a5      	cmp	r5, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	f000 fc34 	bl	80038c8 <_init>
 8003060:	2500      	movs	r5, #0
 8003062:	4e0a      	ldr	r6, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1ba4      	subs	r4, r4, r6
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a5      	cmp	r5, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003074:	4798      	blx	r3
 8003076:	3501      	adds	r5, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800307e:	4798      	blx	r3
 8003080:	3501      	adds	r5, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	08003994 	.word	0x08003994
 8003088:	08003994 	.word	0x08003994
 800308c:	08003994 	.word	0x08003994
 8003090:	08003998 	.word	0x08003998

08003094 <memset>:
 8003094:	4603      	mov	r3, r0
 8003096:	4402      	add	r2, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <siprintf>:
 80030a4:	b40e      	push	{r1, r2, r3}
 80030a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030aa:	b500      	push	{lr}
 80030ac:	b09c      	sub	sp, #112	; 0x70
 80030ae:	ab1d      	add	r3, sp, #116	; 0x74
 80030b0:	9002      	str	r0, [sp, #8]
 80030b2:	9006      	str	r0, [sp, #24]
 80030b4:	9107      	str	r1, [sp, #28]
 80030b6:	9104      	str	r1, [sp, #16]
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <siprintf+0x38>)
 80030ba:	4909      	ldr	r1, [pc, #36]	; (80030e0 <siprintf+0x3c>)
 80030bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80030c0:	9105      	str	r1, [sp, #20]
 80030c2:	6800      	ldr	r0, [r0, #0]
 80030c4:	a902      	add	r1, sp, #8
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	f000 f866 	bl	8003198 <_svfiprintf_r>
 80030cc:	2200      	movs	r2, #0
 80030ce:	9b02      	ldr	r3, [sp, #8]
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	b01c      	add	sp, #112	; 0x70
 80030d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030d8:	b003      	add	sp, #12
 80030da:	4770      	bx	lr
 80030dc:	2000000c 	.word	0x2000000c
 80030e0:	ffff0208 	.word	0xffff0208

080030e4 <__ssputs_r>:
 80030e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e8:	688e      	ldr	r6, [r1, #8]
 80030ea:	4682      	mov	sl, r0
 80030ec:	429e      	cmp	r6, r3
 80030ee:	460c      	mov	r4, r1
 80030f0:	4690      	mov	r8, r2
 80030f2:	4699      	mov	r9, r3
 80030f4:	d837      	bhi.n	8003166 <__ssputs_r+0x82>
 80030f6:	898a      	ldrh	r2, [r1, #12]
 80030f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030fc:	d031      	beq.n	8003162 <__ssputs_r+0x7e>
 80030fe:	2302      	movs	r3, #2
 8003100:	6825      	ldr	r5, [r4, #0]
 8003102:	6909      	ldr	r1, [r1, #16]
 8003104:	1a6f      	subs	r7, r5, r1
 8003106:	6965      	ldr	r5, [r4, #20]
 8003108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800310c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003110:	f109 0301 	add.w	r3, r9, #1
 8003114:	443b      	add	r3, r7
 8003116:	429d      	cmp	r5, r3
 8003118:	bf38      	it	cc
 800311a:	461d      	movcc	r5, r3
 800311c:	0553      	lsls	r3, r2, #21
 800311e:	d530      	bpl.n	8003182 <__ssputs_r+0x9e>
 8003120:	4629      	mov	r1, r5
 8003122:	f000 fb37 	bl	8003794 <_malloc_r>
 8003126:	4606      	mov	r6, r0
 8003128:	b950      	cbnz	r0, 8003140 <__ssputs_r+0x5c>
 800312a:	230c      	movs	r3, #12
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f8ca 3000 	str.w	r3, [sl]
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	463a      	mov	r2, r7
 8003142:	6921      	ldr	r1, [r4, #16]
 8003144:	f000 fab6 	bl	80036b4 <memcpy>
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800314e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	6126      	str	r6, [r4, #16]
 8003156:	443e      	add	r6, r7
 8003158:	6026      	str	r6, [r4, #0]
 800315a:	464e      	mov	r6, r9
 800315c:	6165      	str	r5, [r4, #20]
 800315e:	1bed      	subs	r5, r5, r7
 8003160:	60a5      	str	r5, [r4, #8]
 8003162:	454e      	cmp	r6, r9
 8003164:	d900      	bls.n	8003168 <__ssputs_r+0x84>
 8003166:	464e      	mov	r6, r9
 8003168:	4632      	mov	r2, r6
 800316a:	4641      	mov	r1, r8
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	f000 faac 	bl	80036ca <memmove>
 8003172:	68a3      	ldr	r3, [r4, #8]
 8003174:	2000      	movs	r0, #0
 8003176:	1b9b      	subs	r3, r3, r6
 8003178:	60a3      	str	r3, [r4, #8]
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	441e      	add	r6, r3
 800317e:	6026      	str	r6, [r4, #0]
 8003180:	e7dc      	b.n	800313c <__ssputs_r+0x58>
 8003182:	462a      	mov	r2, r5
 8003184:	f000 fb60 	bl	8003848 <_realloc_r>
 8003188:	4606      	mov	r6, r0
 800318a:	2800      	cmp	r0, #0
 800318c:	d1e2      	bne.n	8003154 <__ssputs_r+0x70>
 800318e:	6921      	ldr	r1, [r4, #16]
 8003190:	4650      	mov	r0, sl
 8003192:	f000 fab3 	bl	80036fc <_free_r>
 8003196:	e7c8      	b.n	800312a <__ssputs_r+0x46>

08003198 <_svfiprintf_r>:
 8003198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319c:	461d      	mov	r5, r3
 800319e:	898b      	ldrh	r3, [r1, #12]
 80031a0:	b09d      	sub	sp, #116	; 0x74
 80031a2:	061f      	lsls	r7, r3, #24
 80031a4:	4680      	mov	r8, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4616      	mov	r6, r2
 80031aa:	d50f      	bpl.n	80031cc <_svfiprintf_r+0x34>
 80031ac:	690b      	ldr	r3, [r1, #16]
 80031ae:	b96b      	cbnz	r3, 80031cc <_svfiprintf_r+0x34>
 80031b0:	2140      	movs	r1, #64	; 0x40
 80031b2:	f000 faef 	bl	8003794 <_malloc_r>
 80031b6:	6020      	str	r0, [r4, #0]
 80031b8:	6120      	str	r0, [r4, #16]
 80031ba:	b928      	cbnz	r0, 80031c8 <_svfiprintf_r+0x30>
 80031bc:	230c      	movs	r3, #12
 80031be:	f8c8 3000 	str.w	r3, [r8]
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	e0c8      	b.n	800335a <_svfiprintf_r+0x1c2>
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6163      	str	r3, [r4, #20]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9309      	str	r3, [sp, #36]	; 0x24
 80031d0:	2320      	movs	r3, #32
 80031d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d6:	2330      	movs	r3, #48	; 0x30
 80031d8:	f04f 0b01 	mov.w	fp, #1
 80031dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031e0:	9503      	str	r5, [sp, #12]
 80031e2:	4637      	mov	r7, r6
 80031e4:	463d      	mov	r5, r7
 80031e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031ea:	b10b      	cbz	r3, 80031f0 <_svfiprintf_r+0x58>
 80031ec:	2b25      	cmp	r3, #37	; 0x25
 80031ee:	d13e      	bne.n	800326e <_svfiprintf_r+0xd6>
 80031f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x76>
 80031f6:	4653      	mov	r3, sl
 80031f8:	4632      	mov	r2, r6
 80031fa:	4621      	mov	r1, r4
 80031fc:	4640      	mov	r0, r8
 80031fe:	f7ff ff71 	bl	80030e4 <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80a4 	beq.w	8003350 <_svfiprintf_r+0x1b8>
 8003208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320a:	4453      	add	r3, sl
 800320c:	9309      	str	r3, [sp, #36]	; 0x24
 800320e:	783b      	ldrb	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 809d 	beq.w	8003350 <_svfiprintf_r+0x1b8>
 8003216:	2300      	movs	r3, #0
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	9307      	str	r3, [sp, #28]
 8003224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003228:	931a      	str	r3, [sp, #104]	; 0x68
 800322a:	462f      	mov	r7, r5
 800322c:	2205      	movs	r2, #5
 800322e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003232:	4850      	ldr	r0, [pc, #320]	; (8003374 <_svfiprintf_r+0x1dc>)
 8003234:	f000 fa30 	bl	8003698 <memchr>
 8003238:	9b04      	ldr	r3, [sp, #16]
 800323a:	b9d0      	cbnz	r0, 8003272 <_svfiprintf_r+0xda>
 800323c:	06d9      	lsls	r1, r3, #27
 800323e:	bf44      	itt	mi
 8003240:	2220      	movmi	r2, #32
 8003242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003246:	071a      	lsls	r2, r3, #28
 8003248:	bf44      	itt	mi
 800324a:	222b      	movmi	r2, #43	; 0x2b
 800324c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003250:	782a      	ldrb	r2, [r5, #0]
 8003252:	2a2a      	cmp	r2, #42	; 0x2a
 8003254:	d015      	beq.n	8003282 <_svfiprintf_r+0xea>
 8003256:	462f      	mov	r7, r5
 8003258:	2000      	movs	r0, #0
 800325a:	250a      	movs	r5, #10
 800325c:	9a07      	ldr	r2, [sp, #28]
 800325e:	4639      	mov	r1, r7
 8003260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003264:	3b30      	subs	r3, #48	; 0x30
 8003266:	2b09      	cmp	r3, #9
 8003268:	d94d      	bls.n	8003306 <_svfiprintf_r+0x16e>
 800326a:	b1b8      	cbz	r0, 800329c <_svfiprintf_r+0x104>
 800326c:	e00f      	b.n	800328e <_svfiprintf_r+0xf6>
 800326e:	462f      	mov	r7, r5
 8003270:	e7b8      	b.n	80031e4 <_svfiprintf_r+0x4c>
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <_svfiprintf_r+0x1dc>)
 8003274:	463d      	mov	r5, r7
 8003276:	1a80      	subs	r0, r0, r2
 8003278:	fa0b f000 	lsl.w	r0, fp, r0
 800327c:	4318      	orrs	r0, r3
 800327e:	9004      	str	r0, [sp, #16]
 8003280:	e7d3      	b.n	800322a <_svfiprintf_r+0x92>
 8003282:	9a03      	ldr	r2, [sp, #12]
 8003284:	1d11      	adds	r1, r2, #4
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	9103      	str	r1, [sp, #12]
 800328a:	2a00      	cmp	r2, #0
 800328c:	db01      	blt.n	8003292 <_svfiprintf_r+0xfa>
 800328e:	9207      	str	r2, [sp, #28]
 8003290:	e004      	b.n	800329c <_svfiprintf_r+0x104>
 8003292:	4252      	negs	r2, r2
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	9207      	str	r2, [sp, #28]
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	783b      	ldrb	r3, [r7, #0]
 800329e:	2b2e      	cmp	r3, #46	; 0x2e
 80032a0:	d10c      	bne.n	80032bc <_svfiprintf_r+0x124>
 80032a2:	787b      	ldrb	r3, [r7, #1]
 80032a4:	2b2a      	cmp	r3, #42	; 0x2a
 80032a6:	d133      	bne.n	8003310 <_svfiprintf_r+0x178>
 80032a8:	9b03      	ldr	r3, [sp, #12]
 80032aa:	3702      	adds	r7, #2
 80032ac:	1d1a      	adds	r2, r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	9203      	str	r2, [sp, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bfb8      	it	lt
 80032b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	4d2e      	ldr	r5, [pc, #184]	; (8003378 <_svfiprintf_r+0x1e0>)
 80032be:	2203      	movs	r2, #3
 80032c0:	7839      	ldrb	r1, [r7, #0]
 80032c2:	4628      	mov	r0, r5
 80032c4:	f000 f9e8 	bl	8003698 <memchr>
 80032c8:	b138      	cbz	r0, 80032da <_svfiprintf_r+0x142>
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	1b40      	subs	r0, r0, r5
 80032ce:	fa03 f000 	lsl.w	r0, r3, r0
 80032d2:	9b04      	ldr	r3, [sp, #16]
 80032d4:	3701      	adds	r7, #1
 80032d6:	4303      	orrs	r3, r0
 80032d8:	9304      	str	r3, [sp, #16]
 80032da:	7839      	ldrb	r1, [r7, #0]
 80032dc:	2206      	movs	r2, #6
 80032de:	4827      	ldr	r0, [pc, #156]	; (800337c <_svfiprintf_r+0x1e4>)
 80032e0:	1c7e      	adds	r6, r7, #1
 80032e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032e6:	f000 f9d7 	bl	8003698 <memchr>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d038      	beq.n	8003360 <_svfiprintf_r+0x1c8>
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <_svfiprintf_r+0x1e8>)
 80032f0:	bb13      	cbnz	r3, 8003338 <_svfiprintf_r+0x1a0>
 80032f2:	9b03      	ldr	r3, [sp, #12]
 80032f4:	3307      	adds	r3, #7
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	3308      	adds	r3, #8
 80032fc:	9303      	str	r3, [sp, #12]
 80032fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003300:	444b      	add	r3, r9
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	e76d      	b.n	80031e2 <_svfiprintf_r+0x4a>
 8003306:	fb05 3202 	mla	r2, r5, r2, r3
 800330a:	2001      	movs	r0, #1
 800330c:	460f      	mov	r7, r1
 800330e:	e7a6      	b.n	800325e <_svfiprintf_r+0xc6>
 8003310:	2300      	movs	r3, #0
 8003312:	250a      	movs	r5, #10
 8003314:	4619      	mov	r1, r3
 8003316:	3701      	adds	r7, #1
 8003318:	9305      	str	r3, [sp, #20]
 800331a:	4638      	mov	r0, r7
 800331c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003320:	3a30      	subs	r2, #48	; 0x30
 8003322:	2a09      	cmp	r2, #9
 8003324:	d903      	bls.n	800332e <_svfiprintf_r+0x196>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0c8      	beq.n	80032bc <_svfiprintf_r+0x124>
 800332a:	9105      	str	r1, [sp, #20]
 800332c:	e7c6      	b.n	80032bc <_svfiprintf_r+0x124>
 800332e:	fb05 2101 	mla	r1, r5, r1, r2
 8003332:	2301      	movs	r3, #1
 8003334:	4607      	mov	r7, r0
 8003336:	e7f0      	b.n	800331a <_svfiprintf_r+0x182>
 8003338:	ab03      	add	r3, sp, #12
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4622      	mov	r2, r4
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <_svfiprintf_r+0x1ec>)
 8003340:	a904      	add	r1, sp, #16
 8003342:	4640      	mov	r0, r8
 8003344:	f3af 8000 	nop.w
 8003348:	f1b0 3fff 	cmp.w	r0, #4294967295
 800334c:	4681      	mov	r9, r0
 800334e:	d1d6      	bne.n	80032fe <_svfiprintf_r+0x166>
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	065b      	lsls	r3, r3, #25
 8003354:	f53f af35 	bmi.w	80031c2 <_svfiprintf_r+0x2a>
 8003358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335a:	b01d      	add	sp, #116	; 0x74
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003360:	ab03      	add	r3, sp, #12
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4622      	mov	r2, r4
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <_svfiprintf_r+0x1ec>)
 8003368:	a904      	add	r1, sp, #16
 800336a:	4640      	mov	r0, r8
 800336c:	f000 f882 	bl	8003474 <_printf_i>
 8003370:	e7ea      	b.n	8003348 <_svfiprintf_r+0x1b0>
 8003372:	bf00      	nop
 8003374:	08003960 	.word	0x08003960
 8003378:	08003966 	.word	0x08003966
 800337c:	0800396a 	.word	0x0800396a
 8003380:	00000000 	.word	0x00000000
 8003384:	080030e5 	.word	0x080030e5

08003388 <_printf_common>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	4691      	mov	r9, r2
 800338e:	461f      	mov	r7, r3
 8003390:	688a      	ldr	r2, [r1, #8]
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	4606      	mov	r6, r0
 8003396:	4293      	cmp	r3, r2
 8003398:	bfb8      	it	lt
 800339a:	4613      	movlt	r3, r2
 800339c:	f8c9 3000 	str.w	r3, [r9]
 80033a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033a4:	460c      	mov	r4, r1
 80033a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033aa:	b112      	cbz	r2, 80033b2 <_printf_common+0x2a>
 80033ac:	3301      	adds	r3, #1
 80033ae:	f8c9 3000 	str.w	r3, [r9]
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	0699      	lsls	r1, r3, #26
 80033b6:	bf42      	ittt	mi
 80033b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033bc:	3302      	addmi	r3, #2
 80033be:	f8c9 3000 	strmi.w	r3, [r9]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	f015 0506 	ands.w	r5, r5, #6
 80033c8:	d107      	bne.n	80033da <_printf_common+0x52>
 80033ca:	f104 0a19 	add.w	sl, r4, #25
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	f8d9 2000 	ldr.w	r2, [r9]
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	42ab      	cmp	r3, r5
 80033d8:	dc29      	bgt.n	800342e <_printf_common+0xa6>
 80033da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	3300      	adds	r3, #0
 80033e2:	bf18      	it	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	0692      	lsls	r2, r2, #26
 80033e8:	d42e      	bmi.n	8003448 <_printf_common+0xc0>
 80033ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ee:	4639      	mov	r1, r7
 80033f0:	4630      	mov	r0, r6
 80033f2:	47c0      	blx	r8
 80033f4:	3001      	adds	r0, #1
 80033f6:	d021      	beq.n	800343c <_printf_common+0xb4>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	68e5      	ldr	r5, [r4, #12]
 80033fc:	f003 0306 	and.w	r3, r3, #6
 8003400:	2b04      	cmp	r3, #4
 8003402:	bf18      	it	ne
 8003404:	2500      	movne	r5, #0
 8003406:	f8d9 2000 	ldr.w	r2, [r9]
 800340a:	f04f 0900 	mov.w	r9, #0
 800340e:	bf08      	it	eq
 8003410:	1aad      	subeq	r5, r5, r2
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	bf08      	it	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	4293      	cmp	r3, r2
 800341e:	bfc4      	itt	gt
 8003420:	1a9b      	subgt	r3, r3, r2
 8003422:	18ed      	addgt	r5, r5, r3
 8003424:	341a      	adds	r4, #26
 8003426:	454d      	cmp	r5, r9
 8003428:	d11a      	bne.n	8003460 <_printf_common+0xd8>
 800342a:	2000      	movs	r0, #0
 800342c:	e008      	b.n	8003440 <_printf_common+0xb8>
 800342e:	2301      	movs	r3, #1
 8003430:	4652      	mov	r2, sl
 8003432:	4639      	mov	r1, r7
 8003434:	4630      	mov	r0, r6
 8003436:	47c0      	blx	r8
 8003438:	3001      	adds	r0, #1
 800343a:	d103      	bne.n	8003444 <_printf_common+0xbc>
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003444:	3501      	adds	r5, #1
 8003446:	e7c2      	b.n	80033ce <_printf_common+0x46>
 8003448:	2030      	movs	r0, #48	; 0x30
 800344a:	18e1      	adds	r1, r4, r3
 800344c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003456:	4422      	add	r2, r4
 8003458:	3302      	adds	r3, #2
 800345a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800345e:	e7c4      	b.n	80033ea <_printf_common+0x62>
 8003460:	2301      	movs	r3, #1
 8003462:	4622      	mov	r2, r4
 8003464:	4639      	mov	r1, r7
 8003466:	4630      	mov	r0, r6
 8003468:	47c0      	blx	r8
 800346a:	3001      	adds	r0, #1
 800346c:	d0e6      	beq.n	800343c <_printf_common+0xb4>
 800346e:	f109 0901 	add.w	r9, r9, #1
 8003472:	e7d8      	b.n	8003426 <_printf_common+0x9e>

08003474 <_printf_i>:
 8003474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800347c:	460c      	mov	r4, r1
 800347e:	7e09      	ldrb	r1, [r1, #24]
 8003480:	b085      	sub	sp, #20
 8003482:	296e      	cmp	r1, #110	; 0x6e
 8003484:	4617      	mov	r7, r2
 8003486:	4606      	mov	r6, r0
 8003488:	4698      	mov	r8, r3
 800348a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800348c:	f000 80b3 	beq.w	80035f6 <_printf_i+0x182>
 8003490:	d822      	bhi.n	80034d8 <_printf_i+0x64>
 8003492:	2963      	cmp	r1, #99	; 0x63
 8003494:	d036      	beq.n	8003504 <_printf_i+0x90>
 8003496:	d80a      	bhi.n	80034ae <_printf_i+0x3a>
 8003498:	2900      	cmp	r1, #0
 800349a:	f000 80b9 	beq.w	8003610 <_printf_i+0x19c>
 800349e:	2958      	cmp	r1, #88	; 0x58
 80034a0:	f000 8083 	beq.w	80035aa <_printf_i+0x136>
 80034a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034ac:	e032      	b.n	8003514 <_printf_i+0xa0>
 80034ae:	2964      	cmp	r1, #100	; 0x64
 80034b0:	d001      	beq.n	80034b6 <_printf_i+0x42>
 80034b2:	2969      	cmp	r1, #105	; 0x69
 80034b4:	d1f6      	bne.n	80034a4 <_printf_i+0x30>
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	0605      	lsls	r5, r0, #24
 80034bc:	f103 0104 	add.w	r1, r3, #4
 80034c0:	d52a      	bpl.n	8003518 <_printf_i+0xa4>
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da03      	bge.n	80034d2 <_printf_i+0x5e>
 80034ca:	222d      	movs	r2, #45	; 0x2d
 80034cc:	425b      	negs	r3, r3
 80034ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034d2:	486f      	ldr	r0, [pc, #444]	; (8003690 <_printf_i+0x21c>)
 80034d4:	220a      	movs	r2, #10
 80034d6:	e039      	b.n	800354c <_printf_i+0xd8>
 80034d8:	2973      	cmp	r1, #115	; 0x73
 80034da:	f000 809d 	beq.w	8003618 <_printf_i+0x1a4>
 80034de:	d808      	bhi.n	80034f2 <_printf_i+0x7e>
 80034e0:	296f      	cmp	r1, #111	; 0x6f
 80034e2:	d020      	beq.n	8003526 <_printf_i+0xb2>
 80034e4:	2970      	cmp	r1, #112	; 0x70
 80034e6:	d1dd      	bne.n	80034a4 <_printf_i+0x30>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	f043 0320 	orr.w	r3, r3, #32
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	e003      	b.n	80034fa <_printf_i+0x86>
 80034f2:	2975      	cmp	r1, #117	; 0x75
 80034f4:	d017      	beq.n	8003526 <_printf_i+0xb2>
 80034f6:	2978      	cmp	r1, #120	; 0x78
 80034f8:	d1d4      	bne.n	80034a4 <_printf_i+0x30>
 80034fa:	2378      	movs	r3, #120	; 0x78
 80034fc:	4865      	ldr	r0, [pc, #404]	; (8003694 <_printf_i+0x220>)
 80034fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003502:	e055      	b.n	80035b0 <_printf_i+0x13c>
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800350a:	1d19      	adds	r1, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6011      	str	r1, [r2, #0]
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003514:	2301      	movs	r3, #1
 8003516:	e08c      	b.n	8003632 <_printf_i+0x1be>
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800351e:	6011      	str	r1, [r2, #0]
 8003520:	bf18      	it	ne
 8003522:	b21b      	sxthne	r3, r3
 8003524:	e7cf      	b.n	80034c6 <_printf_i+0x52>
 8003526:	6813      	ldr	r3, [r2, #0]
 8003528:	6825      	ldr	r5, [r4, #0]
 800352a:	1d18      	adds	r0, r3, #4
 800352c:	6010      	str	r0, [r2, #0]
 800352e:	0628      	lsls	r0, r5, #24
 8003530:	d501      	bpl.n	8003536 <_printf_i+0xc2>
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e002      	b.n	800353c <_printf_i+0xc8>
 8003536:	0668      	lsls	r0, r5, #25
 8003538:	d5fb      	bpl.n	8003532 <_printf_i+0xbe>
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	296f      	cmp	r1, #111	; 0x6f
 800353e:	bf14      	ite	ne
 8003540:	220a      	movne	r2, #10
 8003542:	2208      	moveq	r2, #8
 8003544:	4852      	ldr	r0, [pc, #328]	; (8003690 <_printf_i+0x21c>)
 8003546:	2100      	movs	r1, #0
 8003548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800354c:	6865      	ldr	r5, [r4, #4]
 800354e:	2d00      	cmp	r5, #0
 8003550:	60a5      	str	r5, [r4, #8]
 8003552:	f2c0 8095 	blt.w	8003680 <_printf_i+0x20c>
 8003556:	6821      	ldr	r1, [r4, #0]
 8003558:	f021 0104 	bic.w	r1, r1, #4
 800355c:	6021      	str	r1, [r4, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d13d      	bne.n	80035de <_printf_i+0x16a>
 8003562:	2d00      	cmp	r5, #0
 8003564:	f040 808e 	bne.w	8003684 <_printf_i+0x210>
 8003568:	4665      	mov	r5, ip
 800356a:	2a08      	cmp	r2, #8
 800356c:	d10b      	bne.n	8003586 <_printf_i+0x112>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	07db      	lsls	r3, r3, #31
 8003572:	d508      	bpl.n	8003586 <_printf_i+0x112>
 8003574:	6923      	ldr	r3, [r4, #16]
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	bfde      	ittt	le
 800357c:	2330      	movle	r3, #48	; 0x30
 800357e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003582:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003586:	ebac 0305 	sub.w	r3, ip, r5
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	f8cd 8000 	str.w	r8, [sp]
 8003590:	463b      	mov	r3, r7
 8003592:	aa03      	add	r2, sp, #12
 8003594:	4621      	mov	r1, r4
 8003596:	4630      	mov	r0, r6
 8003598:	f7ff fef6 	bl	8003388 <_printf_common>
 800359c:	3001      	adds	r0, #1
 800359e:	d14d      	bne.n	800363c <_printf_i+0x1c8>
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	b005      	add	sp, #20
 80035a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035aa:	4839      	ldr	r0, [pc, #228]	; (8003690 <_printf_i+0x21c>)
 80035ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035b0:	6813      	ldr	r3, [r2, #0]
 80035b2:	6821      	ldr	r1, [r4, #0]
 80035b4:	1d1d      	adds	r5, r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6015      	str	r5, [r2, #0]
 80035ba:	060a      	lsls	r2, r1, #24
 80035bc:	d50b      	bpl.n	80035d6 <_printf_i+0x162>
 80035be:	07ca      	lsls	r2, r1, #31
 80035c0:	bf44      	itt	mi
 80035c2:	f041 0120 	orrmi.w	r1, r1, #32
 80035c6:	6021      	strmi	r1, [r4, #0]
 80035c8:	b91b      	cbnz	r3, 80035d2 <_printf_i+0x15e>
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	f022 0220 	bic.w	r2, r2, #32
 80035d0:	6022      	str	r2, [r4, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	e7b7      	b.n	8003546 <_printf_i+0xd2>
 80035d6:	064d      	lsls	r5, r1, #25
 80035d8:	bf48      	it	mi
 80035da:	b29b      	uxthmi	r3, r3
 80035dc:	e7ef      	b.n	80035be <_printf_i+0x14a>
 80035de:	4665      	mov	r5, ip
 80035e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80035e4:	fb02 3311 	mls	r3, r2, r1, r3
 80035e8:	5cc3      	ldrb	r3, [r0, r3]
 80035ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035ee:	460b      	mov	r3, r1
 80035f0:	2900      	cmp	r1, #0
 80035f2:	d1f5      	bne.n	80035e0 <_printf_i+0x16c>
 80035f4:	e7b9      	b.n	800356a <_printf_i+0xf6>
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	6825      	ldr	r5, [r4, #0]
 80035fa:	1d18      	adds	r0, r3, #4
 80035fc:	6961      	ldr	r1, [r4, #20]
 80035fe:	6010      	str	r0, [r2, #0]
 8003600:	0628      	lsls	r0, r5, #24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	d501      	bpl.n	800360a <_printf_i+0x196>
 8003606:	6019      	str	r1, [r3, #0]
 8003608:	e002      	b.n	8003610 <_printf_i+0x19c>
 800360a:	066a      	lsls	r2, r5, #25
 800360c:	d5fb      	bpl.n	8003606 <_printf_i+0x192>
 800360e:	8019      	strh	r1, [r3, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	4665      	mov	r5, ip
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	e7b9      	b.n	800358c <_printf_i+0x118>
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	1d19      	adds	r1, r3, #4
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	681d      	ldr	r5, [r3, #0]
 8003620:	6862      	ldr	r2, [r4, #4]
 8003622:	2100      	movs	r1, #0
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f837 	bl	8003698 <memchr>
 800362a:	b108      	cbz	r0, 8003630 <_printf_i+0x1bc>
 800362c:	1b40      	subs	r0, r0, r5
 800362e:	6060      	str	r0, [r4, #4]
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800363a:	e7a7      	b.n	800358c <_printf_i+0x118>
 800363c:	6923      	ldr	r3, [r4, #16]
 800363e:	462a      	mov	r2, r5
 8003640:	4639      	mov	r1, r7
 8003642:	4630      	mov	r0, r6
 8003644:	47c0      	blx	r8
 8003646:	3001      	adds	r0, #1
 8003648:	d0aa      	beq.n	80035a0 <_printf_i+0x12c>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	079b      	lsls	r3, r3, #30
 800364e:	d413      	bmi.n	8003678 <_printf_i+0x204>
 8003650:	68e0      	ldr	r0, [r4, #12]
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	4298      	cmp	r0, r3
 8003656:	bfb8      	it	lt
 8003658:	4618      	movlt	r0, r3
 800365a:	e7a3      	b.n	80035a4 <_printf_i+0x130>
 800365c:	2301      	movs	r3, #1
 800365e:	464a      	mov	r2, r9
 8003660:	4639      	mov	r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d09a      	beq.n	80035a0 <_printf_i+0x12c>
 800366a:	3501      	adds	r5, #1
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	9a03      	ldr	r2, [sp, #12]
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	42ab      	cmp	r3, r5
 8003674:	dcf2      	bgt.n	800365c <_printf_i+0x1e8>
 8003676:	e7eb      	b.n	8003650 <_printf_i+0x1dc>
 8003678:	2500      	movs	r5, #0
 800367a:	f104 0919 	add.w	r9, r4, #25
 800367e:	e7f5      	b.n	800366c <_printf_i+0x1f8>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ac      	bne.n	80035de <_printf_i+0x16a>
 8003684:	7803      	ldrb	r3, [r0, #0]
 8003686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800368a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368e:	e76c      	b.n	800356a <_printf_i+0xf6>
 8003690:	08003971 	.word	0x08003971
 8003694:	08003982 	.word	0x08003982

08003698 <memchr>:
 8003698:	b510      	push	{r4, lr}
 800369a:	b2c9      	uxtb	r1, r1
 800369c:	4402      	add	r2, r0
 800369e:	4290      	cmp	r0, r2
 80036a0:	4603      	mov	r3, r0
 80036a2:	d101      	bne.n	80036a8 <memchr+0x10>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e003      	b.n	80036b0 <memchr+0x18>
 80036a8:	781c      	ldrb	r4, [r3, #0]
 80036aa:	3001      	adds	r0, #1
 80036ac:	428c      	cmp	r4, r1
 80036ae:	d1f6      	bne.n	800369e <memchr+0x6>
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <memcpy>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	1e43      	subs	r3, r0, #1
 80036b8:	440a      	add	r2, r1
 80036ba:	4291      	cmp	r1, r2
 80036bc:	d100      	bne.n	80036c0 <memcpy+0xc>
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c8:	e7f7      	b.n	80036ba <memcpy+0x6>

080036ca <memmove>:
 80036ca:	4288      	cmp	r0, r1
 80036cc:	b510      	push	{r4, lr}
 80036ce:	eb01 0302 	add.w	r3, r1, r2
 80036d2:	d807      	bhi.n	80036e4 <memmove+0x1a>
 80036d4:	1e42      	subs	r2, r0, #1
 80036d6:	4299      	cmp	r1, r3
 80036d8:	d00a      	beq.n	80036f0 <memmove+0x26>
 80036da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036e2:	e7f8      	b.n	80036d6 <memmove+0xc>
 80036e4:	4283      	cmp	r3, r0
 80036e6:	d9f5      	bls.n	80036d4 <memmove+0xa>
 80036e8:	1881      	adds	r1, r0, r2
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	42d3      	cmn	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memmove+0x28>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036fa:	e7f7      	b.n	80036ec <memmove+0x22>

080036fc <_free_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4605      	mov	r5, r0
 8003700:	2900      	cmp	r1, #0
 8003702:	d043      	beq.n	800378c <_free_r+0x90>
 8003704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003708:	1f0c      	subs	r4, r1, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfb8      	it	lt
 800370e:	18e4      	addlt	r4, r4, r3
 8003710:	f000 f8d0 	bl	80038b4 <__malloc_lock>
 8003714:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <_free_r+0x94>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	4610      	mov	r0, r2
 800371a:	b933      	cbnz	r3, 800372a <_free_r+0x2e>
 800371c:	6063      	str	r3, [r4, #4]
 800371e:	6014      	str	r4, [r2, #0]
 8003720:	4628      	mov	r0, r5
 8003722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003726:	f000 b8c6 	b.w	80038b6 <__malloc_unlock>
 800372a:	42a3      	cmp	r3, r4
 800372c:	d90b      	bls.n	8003746 <_free_r+0x4a>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	1862      	adds	r2, r4, r1
 8003732:	4293      	cmp	r3, r2
 8003734:	bf01      	itttt	eq
 8003736:	681a      	ldreq	r2, [r3, #0]
 8003738:	685b      	ldreq	r3, [r3, #4]
 800373a:	1852      	addeq	r2, r2, r1
 800373c:	6022      	streq	r2, [r4, #0]
 800373e:	6063      	str	r3, [r4, #4]
 8003740:	6004      	str	r4, [r0, #0]
 8003742:	e7ed      	b.n	8003720 <_free_r+0x24>
 8003744:	4613      	mov	r3, r2
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	b10a      	cbz	r2, 800374e <_free_r+0x52>
 800374a:	42a2      	cmp	r2, r4
 800374c:	d9fa      	bls.n	8003744 <_free_r+0x48>
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	1858      	adds	r0, r3, r1
 8003752:	42a0      	cmp	r0, r4
 8003754:	d10b      	bne.n	800376e <_free_r+0x72>
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	4401      	add	r1, r0
 800375a:	1858      	adds	r0, r3, r1
 800375c:	4282      	cmp	r2, r0
 800375e:	6019      	str	r1, [r3, #0]
 8003760:	d1de      	bne.n	8003720 <_free_r+0x24>
 8003762:	6810      	ldr	r0, [r2, #0]
 8003764:	6852      	ldr	r2, [r2, #4]
 8003766:	4401      	add	r1, r0
 8003768:	6019      	str	r1, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	e7d8      	b.n	8003720 <_free_r+0x24>
 800376e:	d902      	bls.n	8003776 <_free_r+0x7a>
 8003770:	230c      	movs	r3, #12
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	e7d4      	b.n	8003720 <_free_r+0x24>
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	1821      	adds	r1, r4, r0
 800377a:	428a      	cmp	r2, r1
 800377c:	bf01      	itttt	eq
 800377e:	6811      	ldreq	r1, [r2, #0]
 8003780:	6852      	ldreq	r2, [r2, #4]
 8003782:	1809      	addeq	r1, r1, r0
 8003784:	6021      	streq	r1, [r4, #0]
 8003786:	6062      	str	r2, [r4, #4]
 8003788:	605c      	str	r4, [r3, #4]
 800378a:	e7c9      	b.n	8003720 <_free_r+0x24>
 800378c:	bd38      	pop	{r3, r4, r5, pc}
 800378e:	bf00      	nop
 8003790:	20000090 	.word	0x20000090

08003794 <_malloc_r>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	1ccd      	adds	r5, r1, #3
 8003798:	f025 0503 	bic.w	r5, r5, #3
 800379c:	3508      	adds	r5, #8
 800379e:	2d0c      	cmp	r5, #12
 80037a0:	bf38      	it	cc
 80037a2:	250c      	movcc	r5, #12
 80037a4:	2d00      	cmp	r5, #0
 80037a6:	4606      	mov	r6, r0
 80037a8:	db01      	blt.n	80037ae <_malloc_r+0x1a>
 80037aa:	42a9      	cmp	r1, r5
 80037ac:	d903      	bls.n	80037b6 <_malloc_r+0x22>
 80037ae:	230c      	movs	r3, #12
 80037b0:	6033      	str	r3, [r6, #0]
 80037b2:	2000      	movs	r0, #0
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	f000 f87d 	bl	80038b4 <__malloc_lock>
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <_malloc_r+0xac>)
 80037bc:	6814      	ldr	r4, [r2, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	b991      	cbnz	r1, 80037e8 <_malloc_r+0x54>
 80037c2:	4c20      	ldr	r4, [pc, #128]	; (8003844 <_malloc_r+0xb0>)
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	b91b      	cbnz	r3, 80037d0 <_malloc_r+0x3c>
 80037c8:	4630      	mov	r0, r6
 80037ca:	f000 f863 	bl	8003894 <_sbrk_r>
 80037ce:	6020      	str	r0, [r4, #0]
 80037d0:	4629      	mov	r1, r5
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f85e 	bl	8003894 <_sbrk_r>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d124      	bne.n	8003826 <_malloc_r+0x92>
 80037dc:	230c      	movs	r3, #12
 80037de:	4630      	mov	r0, r6
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	f000 f868 	bl	80038b6 <__malloc_unlock>
 80037e6:	e7e4      	b.n	80037b2 <_malloc_r+0x1e>
 80037e8:	680b      	ldr	r3, [r1, #0]
 80037ea:	1b5b      	subs	r3, r3, r5
 80037ec:	d418      	bmi.n	8003820 <_malloc_r+0x8c>
 80037ee:	2b0b      	cmp	r3, #11
 80037f0:	d90f      	bls.n	8003812 <_malloc_r+0x7e>
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	18cc      	adds	r4, r1, r3
 80037f6:	50cd      	str	r5, [r1, r3]
 80037f8:	4630      	mov	r0, r6
 80037fa:	f000 f85c 	bl	80038b6 <__malloc_unlock>
 80037fe:	f104 000b 	add.w	r0, r4, #11
 8003802:	1d23      	adds	r3, r4, #4
 8003804:	f020 0007 	bic.w	r0, r0, #7
 8003808:	1ac3      	subs	r3, r0, r3
 800380a:	d0d3      	beq.n	80037b4 <_malloc_r+0x20>
 800380c:	425a      	negs	r2, r3
 800380e:	50e2      	str	r2, [r4, r3]
 8003810:	e7d0      	b.n	80037b4 <_malloc_r+0x20>
 8003812:	684b      	ldr	r3, [r1, #4]
 8003814:	428c      	cmp	r4, r1
 8003816:	bf16      	itet	ne
 8003818:	6063      	strne	r3, [r4, #4]
 800381a:	6013      	streq	r3, [r2, #0]
 800381c:	460c      	movne	r4, r1
 800381e:	e7eb      	b.n	80037f8 <_malloc_r+0x64>
 8003820:	460c      	mov	r4, r1
 8003822:	6849      	ldr	r1, [r1, #4]
 8003824:	e7cc      	b.n	80037c0 <_malloc_r+0x2c>
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d005      	beq.n	800383c <_malloc_r+0xa8>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4630      	mov	r0, r6
 8003834:	f000 f82e 	bl	8003894 <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d0cf      	beq.n	80037dc <_malloc_r+0x48>
 800383c:	6025      	str	r5, [r4, #0]
 800383e:	e7db      	b.n	80037f8 <_malloc_r+0x64>
 8003840:	20000090 	.word	0x20000090
 8003844:	20000094 	.word	0x20000094

08003848 <_realloc_r>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	4607      	mov	r7, r0
 800384c:	4614      	mov	r4, r2
 800384e:	460e      	mov	r6, r1
 8003850:	b921      	cbnz	r1, 800385c <_realloc_r+0x14>
 8003852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003856:	4611      	mov	r1, r2
 8003858:	f7ff bf9c 	b.w	8003794 <_malloc_r>
 800385c:	b922      	cbnz	r2, 8003868 <_realloc_r+0x20>
 800385e:	f7ff ff4d 	bl	80036fc <_free_r>
 8003862:	4625      	mov	r5, r4
 8003864:	4628      	mov	r0, r5
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003868:	f000 f826 	bl	80038b8 <_malloc_usable_size_r>
 800386c:	42a0      	cmp	r0, r4
 800386e:	d20f      	bcs.n	8003890 <_realloc_r+0x48>
 8003870:	4621      	mov	r1, r4
 8003872:	4638      	mov	r0, r7
 8003874:	f7ff ff8e 	bl	8003794 <_malloc_r>
 8003878:	4605      	mov	r5, r0
 800387a:	2800      	cmp	r0, #0
 800387c:	d0f2      	beq.n	8003864 <_realloc_r+0x1c>
 800387e:	4631      	mov	r1, r6
 8003880:	4622      	mov	r2, r4
 8003882:	f7ff ff17 	bl	80036b4 <memcpy>
 8003886:	4631      	mov	r1, r6
 8003888:	4638      	mov	r0, r7
 800388a:	f7ff ff37 	bl	80036fc <_free_r>
 800388e:	e7e9      	b.n	8003864 <_realloc_r+0x1c>
 8003890:	4635      	mov	r5, r6
 8003892:	e7e7      	b.n	8003864 <_realloc_r+0x1c>

08003894 <_sbrk_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	2300      	movs	r3, #0
 8003898:	4c05      	ldr	r4, [pc, #20]	; (80038b0 <_sbrk_r+0x1c>)
 800389a:	4605      	mov	r5, r0
 800389c:	4608      	mov	r0, r1
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	f7fd fba8 	bl	8000ff4 <_sbrk>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d102      	bne.n	80038ae <_sbrk_r+0x1a>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	b103      	cbz	r3, 80038ae <_sbrk_r+0x1a>
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	20000188 	.word	0x20000188

080038b4 <__malloc_lock>:
 80038b4:	4770      	bx	lr

080038b6 <__malloc_unlock>:
 80038b6:	4770      	bx	lr

080038b8 <_malloc_usable_size_r>:
 80038b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038bc:	1f18      	subs	r0, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bfbc      	itt	lt
 80038c2:	580b      	ldrlt	r3, [r1, r0]
 80038c4:	18c0      	addlt	r0, r0, r3
 80038c6:	4770      	bx	lr

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
